import core.runtime

namespace core
{
    public virtual immutable class Error
    {
        private protected constructor()
        {
        }
    }

    public virtual abstract immutable class Abort extends Error
    {
        private let _token : immutable object


        protected constructor(token: immutable object)
        {
            _token = token
        }


        public func reset(token: immutable object)
        {
            if _token == token then
            {
                reset(this)
            }
        }

        @ExternImport("stark_reset_abort")
        private extern static func reset(abortInstance: Abort)
    }

    public virtual abstract immutable class Exception extends Error
    {
        protected constructor()
        {
        }

        // public constructor(message: string)
        // {
        //     this.message = message;
        // }

        // public constructor(message: string, inner_exception: Exception)
        // {
        //     this.message = message;
        //     this.inner_exception = inner_exception;
        // }

        // public func message -> ?string { get }

        // public func inner_exception -> ?Exception { get }
    }
}
