namespace core
import core.runtime

public struct FixedArray<T, tSize> implements IArray<T> where tSize: is const int
{
    // The array cannot be initialized by using directly this class
    private constructor() {}

    // size is readable
    public func size -> int => tSize

    /// ref indexer
    public func operator [index: int] -> ref T
        requires index as uint < tSize as uint
     { 
        get
        {
            unsafe il
            {
                ldarg.0
                ldarg.1
                sizeof T
                conv.i
                mul
                add
                ret
            }
        } 
    }

    public func operator [index: Index] -> ref T => ref this[index.offset(this.size)]

    public func operator [range: Range] -> Slice<[tSize]T,T> 
    {
        get {
            var begin = range.begin.offset(this.size)
            var end = range.end.offset(this.size)
            return new Slice<[tSize]T,T>(this, begin, end - begin + 1)
        }
    }

    readable func Iterable<T, int>.iterate_begin() -> int => 0

    readable func Iterable<T, int>.iterate_has_current(index: ref int) -> bool => index < size

    readable func Iterable<T, int>.iterate_current(index: ref int) -> T => this[index]

    readable func Iterable<T, int>.iterate_next(index: ref int) => index++

    readable func Iterable<T, int>.iterate_end(state: ref int) {}

    func MutableIterable<T, int>.iterate_current(index: ref int) -> ref T => ref this[index]
}

public class PlayFixedArray
{
    // Declare a field with a fixed size array
    public var field_table: [4]int

    // Fixed size array of objects
    public var field_table_of_objects: [3]object
}

public module fixedarray_playground
{
    public static func play_with_fixed(cls: PlayFixedArray, 
                                       fixed_array_by_ref: ref [2]int) -> int {
        // Fixed size array access
        return cls.field_table[0] + fixed_array_by_ref[1]
    }
}    
