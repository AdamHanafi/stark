namespace core
import core.runtime
    // public union struct Result<T>
    //     case Failure(exception: Exception)
    //     case Success(value: T)
    // {
    // }

/*    @Union
    public immutable abstract struct Result<T>
    {
        internal let _type : i32
        internal let _exception : Exception
        internal let _value : T

        protected constructor(value: T)
        {
            _type = type
            _exception = null
            _value = value
        }

        protected constructor(type: int, exception: Exception)
        {
            _type = type
            _exception = exception
            _value = default
        }
    }


    @Union
    public immutable struct Success<T> extends Result<T>
    {
        public constructor(value: T) : base(value) {}

        public func value -> T => _value
    }

    @Union
    public immutable struct Failure<T> extends Result<T>
    {
        public constructor(exception: Exception) : base(exception) {}

        public func exception -> Exception => _exception
    }

    public module yo
    {

        public static func test()
        {
            var x = new Success<int>(5)
            var y = new Failure<int>(new Exception())

            if x is Success<int> success then
            {

            }
        }
    }
*/

    // public union struct Option<T>
    //     case None()
    //     case Value(value: T)
    // {
    // }