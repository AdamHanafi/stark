import core.runtime

namespace core
{
    public interface ISizeable
    {
        // size is readonly
        func size -> int { readonly get }
    }

    public interface IArray<T> extends ISizeable
    {
        /// ref indexer #2, not readonly
        func operator [index: int] -> ref T 
            requires index >= 0 && index < size
        { 
            get 
        }

        // in indexer #3, readonly
        func operator [index: int] -> in T
            requires index >= 0 && index < size
        {            
            readonly get 
        }
    }

    public abstract class Array implements ISizeable
    {
        private let _size : int
        private var _firstElement : int

        protected constructor() {}

        // size is readonly
        public func size -> int { readonly get => _size }
    }

    public class Array<T> extends Array implements IArray<T>
    {
        // The array cannot be initialized by using directly this class
        private constructor() {}

        /// ref indexer #2, not readonly
        public extern func operator [index: int] -> ref T { 
            @Intrinsic
            get 
        }

        // in indexer #3, readonly
        public extern func operator [index: int] -> in T {
            @Intrinsic
            get 
        }
    }

    // public module array_playground
    // {
    //     // Constant
    //     public const static_readonly_array : []int = new [size]int :: index => index * 2

    //     // Returns a readonly array
    //     public static func get_readonly_array(size: int) -> readonly []int
    //         requires size > 0
    //     {
    //         // store array[i] = i * 2
    //         return new [size]int :: index => index * 2
    //     }

    //     // Returns a readonly array of readonly elements
    //     public static func get_readonly_array(size: int) -> readonly [] readonly MyObject
    //         requires size > 0
    //     {
    //         return new [size] MyObject :: index => new MyObject(index)
    //     }
    // }

/*
    public struct Slice<T> implements IArray<T>
    {
        private let _array : Array<T>
        private let _offset : int
        private let _size : int

        public constructor(array: Array<T>, offset: int, size: int)
        {
            _array = array
            _offset = offset
            _size = size
        }

        public func size -> int { readonly get => _size }

        /// indexer #1: regular indexer, readonly get
        public func operator [index: int] -> T { 
            readonly get => _array[index]
            set {
                _array[index] = value
            }
        }

        /// ref indexer #2, not readonly
        public func operator [index: int] -> ref T { 
            get => ref _array[index]
        }

        // in indexer #3, readonly
        public func operator [index: int] -> in T { 
            readonly get => in _array[index]
        }
    }
*/
}

