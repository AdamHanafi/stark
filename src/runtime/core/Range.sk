namespace core
public immutable struct Range implements Iterable<int, int>
{
    public constructor(begin: Index, end: Index)
    {
        this.begin = begin
        this.end = end
    }

    public let begin : Index

    public let end : Index

    readable func Iterable<int, int>.iterate_begin() -> int => begin.value

    readable func Iterable<int, int>.iterate_has_current(index: ref int) -> bool => index >= begin.value && index <= end.value

    readable func Iterable<int, int>.iterate_current(index: ref int) -> int => index

    readable func Iterable<int, int>.iterate_next(index: ref int) => index++

    readable func Iterable<int, int>.iterate_end(index: ref int) {}
}

public module range_playground
{
    public static func sun_range() -> int
    {
        var result : int = 0
        // iterates from -1 to 1 inclusive
        for x in -1..1 {
            result += x
        }
        return result // returns 0
    }

    public static func sun_range(range: Range) -> int
    {
        var result : int = 141
        for x in range {
            result += x
        }
        return result
    }

    public static func sun_range(array: []u8) -> int
    {
        var result : int = 0
        for i in 0..<array.size {
            result += array[i]
        }
        return result
    }
}