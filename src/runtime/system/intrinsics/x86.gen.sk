import core.runtime

namespace core
{
    public partial module intrinsics
    {
        public partial module x86
        {
            public partial module sse
            {
                
                /// Get the unsigned 32-bit value of the MXCSR control and status register.
                @Intrinsic
                public static extern func _mm_getcsr() -> u32
                
                /// Set the MXCSR control and status register with the value in unsigned 32-bit integer `a`.
                @Intrinsic
                public static extern func _mm_setcsr(a: u32)
                
                /// Fetch the line of data from memory that contains address `p` to a location in the cache heirarchy specified by the locality hint `i`.
                @Intrinsic
                public static unsafe extern func _mm_prefetch(p: *u8, i: i32)
                
                /// Perform a serializing operation on all store-to-memory instructions that were issued prior to this instruction. Guarantees that every store instruction that precedes, in program order, is globally visible before any store instruction which follows the fence in program order.
                @Intrinsic
                public static extern func _mm_sfence()
                
                /// Convert the 32-bit integer `b` to a single-precision (32-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cvtsi32_ss(a: __m128, b: i32) -> __m128
                
                /// Convert the 32-bit integer `b` to a single-precision (32-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cvt_si2ss(a: __m128, b: i32) -> __m128
                
                /// Convert the 64-bit integer `b` to a single-precision (32-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cvtsi64_ss(a: __m128, b: i64) -> __m128
                
                /// Add the lower single-precision (32-bit) floating-point element in `a` and `b`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`. 
                @Intrinsic
                public static extern func _mm_add_ss(a: __m128, b: __m128) -> __m128
                
                /// Add packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_add_ps(a: __m128, b: __m128) -> __m128
                
                /// Subtract the lower single-precision (32-bit) floating-point element in `b` from the lower single-precision (32-bit) floating-point element in `a`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_sub_ss(a: __m128, b: __m128) -> __m128
                
                /// Subtract packed single-precision (32-bit) floating-point elements in `b` from packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sub_ps(a: __m128, b: __m128) -> __m128
                
                /// Multiply the lower single-precision (32-bit) floating-point element in `a` and `b`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_mul_ss(a: __m128, b: __m128) -> __m128
                
                /// Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_mul_ps(a: __m128, b: __m128) -> __m128
                
                /// Divide the lower single-precision (32-bit) floating-point element in `a` by the lower single-precision (32-bit) floating-point element in `b`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`. 
                @Intrinsic
                public static extern func _mm_div_ss(a: __m128, b: __m128) -> __m128
                
                /// Divide packed single-precision (32-bit) floating-point elements in `a` by packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_div_ps(a: __m128, b: __m128) -> __m128
                
                /// Compute the square root of the lower single-precision (32-bit) floating-point element in `a`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_sqrt_ss(a: __m128) -> __m128
                
                /// Compute the square root of packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sqrt_ps(a: __m128) -> __m128
                
                /// Compute the approximate reciprocal of the lower single-precision (32-bit) floating-point element in `a`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`. The maximum relative error for this approximation is less than 1.5*2^-12.
                @Intrinsic
                public static extern func _mm_rcp_ss(a: __m128) -> __m128
                
                /// Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`. The maximum relative error for this approximation is less than 1.5*2^-12.
                @Intrinsic
                public static extern func _mm_rcp_ps(a: __m128) -> __m128
                
                /// Compute the approximate reciprocal square root of the lower single-precision (32-bit) floating-point element in `a`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`. The maximum relative error for this approximation is less than 1.5*2^-12.
                @Intrinsic
                public static extern func _mm_rsqrt_ss(a: __m128) -> __m128
                
                /// Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`. The maximum relative error for this approximation is less than 1.5*2^-12.
                @Intrinsic
                public static extern func _mm_rsqrt_ps(a: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b`, store the minimum value in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_min_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm_min_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b`, store the maximum value in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_max_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm_max_ps(a: __m128, b: __m128) -> __m128
                
                /// Compute the bitwise AND of packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_and_ps(a: __m128, b: __m128) -> __m128
                
                /// Compute the bitwise NOT of packed single-precision (32-bit) floating-point elements in `a` and then AND with `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_andnot_ps(a: __m128, b: __m128) -> __m128
                
                /// Compute the bitwise OR of packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_or_ps(a: __m128, b: __m128) -> __m128
                
                /// Compute the bitwise XOR of packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_xor_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for equality, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for less-than, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmplt_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for less-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmplt_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for less-than-or-equal, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmple_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for less-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmple_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for greater-than, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for greater-than-or-equal, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpge_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for greater-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpge_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for not-equal, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpneq_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for not-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpneq_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for not-less-than, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpnlt_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for not-less-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpnlt_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for not-less-than-or-equal, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpnle_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for not-less-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpnle_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for not-greater-than, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpngt_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for not-greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpngt_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` for not-greater-than-or-equal, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpnge_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` for not-greater-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpnge_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` to see if neither is NaN, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpord_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` to see if neither is NaN, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpord_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point elements in `a` and `b` to see if either is NaN, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cmpunord_ss(a: __m128, b: __m128) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` to see if either is NaN, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpunord_ps(a: __m128, b: __m128) -> __m128
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for equality, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comieq_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for less-than, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comilt_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for less-than-or-equal, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comile_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for greater-than, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comigt_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for greater-than-or-equal, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comige_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for not-equal, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comineq_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for equality, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomieq_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for less-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomilt_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for less-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomile_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for greater-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomigt_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for greater-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomige_ss(a: __m128, b: __m128) -> i32
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` for not-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomineq_ss(a: __m128, b: __m128) -> i32
                
                /// Convert the lower single-precision (32-bit) floating-point element in `a` to a 32-bit integer, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvtss_si32(a: __m128) -> i32
                
                /// Convert the lower single-precision (32-bit) floating-point element in `a` to a 32-bit integer, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvt_ss2si(a: __m128) -> i32
                
                /// Convert the lower single-precision (32-bit) floating-point element in `a` to a 64-bit integer, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvtss_si64(a: __m128) -> i64
                
                /// Copy the lower single-precision (32-bit) floating-point element of `a` to `dst`.
                @Intrinsic
                public static extern func _mm_cvtss_f32(a: __m128) -> f32
                
                /// Convert the lower single-precision (32-bit) floating-point element in `a` to a 32-bit integer with truncation, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvttss_si32(a: __m128) -> i32
                
                /// Convert the lower single-precision (32-bit) floating-point element in `a` to a 32-bit integer with truncation, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvtt_ss2si(a: __m128) -> i32
                
                /// Convert the lower single-precision (32-bit) floating-point element in `a` to a 64-bit integer with truncation, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvttss_si64(a: __m128) -> i64
                
                /// Copy single-precision (32-bit) floating-point element `a` to the lower element of `dst`, and zero the upper 3 elements.
                @Intrinsic
                public static extern func _mm_set_ss(a: f32) -> __m128
                
                /// Broadcast single-precision (32-bit) floating-point value `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_set1_ps(a: f32) -> __m128
                
                /// Broadcast single-precision (32-bit) floating-point value `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_set_ps1(a: f32) -> __m128
                
                /// Set packed single-precision (32-bit) floating-point elements in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm_set_ps(e3: f32, e2: f32, e1: f32, e0: f32) -> __m128
                
                /// Set packed single-precision (32-bit) floating-point elements in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm_setr_ps(e3: f32, e2: f32, e1: f32, e0: f32) -> __m128
                
                /// Return vector of type __m128 with all elements set to zero.
                @Intrinsic
                public static extern func _mm_setzero_ps() -> __m128
                
                /// Load a single-precision (32-bit) floating-point element from memory into the lower of `dst`, and zero the upper 3 elements. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_load_ss(mem_addr: *f32) -> __m128
                
                /// Load a single-precision (32-bit) floating-point element from memory into all elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_load1_ps(mem_addr: *f32) -> __m128
                
                /// Load a single-precision (32-bit) floating-point element from memory into all elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_load_ps1(mem_addr: *f32) -> __m128
                
                /// Load 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from memory into `dst`. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_load_ps(mem_addr: *f32) -> __m128
                
                /// Load 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from memory into `dst`. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_loadu_ps(mem_addr: *f32) -> __m128
                
                /// Load 4 single-precision (32-bit) floating-point elements from memory into `dst` in reverse order. mem_addr must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_loadr_ps(mem_addr: *f32) -> __m128
                
                /// Store 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `a` into memory using a non-temporal memory hint. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_stream_ps(mem_addr: *f32, a: __m128)
                
                /// Store the lower single-precision (32-bit) floating-point element from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_store_ss(mem_addr: *f32, a: __m128)
                
                /// Store the lower single-precision (32-bit) floating-point element from `a` into 4 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_store1_ps(mem_addr: *f32, a: __m128)
                
                /// Store the lower single-precision (32-bit) floating-point element from `a` into 4 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_store_ps1(mem_addr: *f32, a: __m128)
                
                /// Store 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `a` into memory. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_store_ps(mem_addr: *f32, a: __m128)
                
                /// Store 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `a` into memory. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_storeu_ps(mem_addr: *f32, a: __m128)
                
                /// Store 4 single-precision (32-bit) floating-point elements from `a` into memory in reverse order. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_storer_ps(mem_addr: *f32, a: __m128)
                
                /// Move the lower single-precision (32-bit) floating-point element from `b` to the lower element of `dst`, and copy the upper 3 elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_move_ss(a: __m128, b: __m128) -> __m128
                
                /// Shuffle single-precision (32-bit) floating-point elements in `a` using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_shuffle_ps(a: __m128, b: __m128, imm8: u32) -> __m128
                
                /// Unpack and interleave single-precision (32-bit) floating-point elements from the high half `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpackhi_ps(a: __m128, b: __m128) -> __m128
                
                /// Unpack and interleave single-precision (32-bit) floating-point elements from the low half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpacklo_ps(a: __m128, b: __m128) -> __m128
                
                /// Move the upper 2 single-precision (32-bit) floating-point elements from `b` to the lower 2 elements of `dst`, and copy the upper 2 elements from `a` to the upper 2 elements of `dst`.
                @Intrinsic
                public static extern func _mm_movehl_ps(a: __m128, b: __m128) -> __m128
                
                /// Move the lower 2 single-precision (32-bit) floating-point elements from `b` to the upper 2 elements of `dst`, and copy the lower 2 elements from `a` to the lower 2 elements of `dst`.
                @Intrinsic
                public static extern func _mm_movelh_ps(a: __m128, b: __m128) -> __m128
                
                /// Set each bit of mask `dst` based on the most significant bit of the corresponding packed single-precision (32-bit) floating-point element in `a`.
                @Intrinsic
                public static extern func _mm_movemask_ps(a: __m128) -> i32
                
                /// Allocate `size` bytes of memory, aligned to the alignment specified in `align`, and return a pointer to the allocated memory. `_mm_free` should be used to free memory that is allocated with `_mm_malloc`.
                @Intrinsic
                public static unsafe extern func _mm_malloc(size: uint, align: uint) -> *u8
                
                /// Free aligned memory that was allocated with `_mm_malloc`.
                @Intrinsic
                public static unsafe extern func _mm_free(mem_addr: *u8)
            }
            
            public partial module sse2
            {
                
                /// Provide a hint to the processor that the code sequence is a spin-wait loop. This can help improve the performance and power consumption of spin-wait loops.
                @Intrinsic
                public static extern func _mm_pause()
                
                /// Invalidate and flush the cache line that contains `p` from all levels of the cache hierarchy.
                @Intrinsic
                public static unsafe extern func _mm_clflush(p: *u8)
                
                /// Perform a serializing operation on all load-from-memory instructions that were issued prior to this instruction. Guarantees that every load instruction that precedes, in program order, is globally visible before any load instruction which follows the fence in program order.
                @Intrinsic
                public static extern func _mm_lfence()
                
                /// Perform a serializing operation on all load-from-memory and store-to-memory instructions that were issued prior to this instruction. Guarantees that every memory access that precedes, in program order, the memory fence instruction is globally visible before any memory instruction which follows the fence in program order.
                @Intrinsic
                public static extern func _mm_mfence()
                
                /// Add packed 8-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_add_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Add packed 16-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_add_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Add packed 32-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Add packed 64-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_add_epi64(a: __m128i, b: __m128i) -> __m128i
                
                /// Add packed 8-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_adds_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Add packed 16-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_adds_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Add packed unsigned 8-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_adds_epu8(a: __m128i, b: __m128i) -> __m128i
                
                /// Add packed unsigned 16-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_adds_epu16(a: __m128i, b: __m128i) -> __m128i
                
                /// Average packed unsigned 8-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_avg_epu8(a: __m128i, b: __m128i) -> __m128i
                
                /// Average packed unsigned 16-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_avg_epu16(a: __m128i, b: __m128i) -> __m128i
                
                /// Multiply packed signed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_madd_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 16-bit integers in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm_max_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed unsigned 8-bit integers in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm_max_epu8(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 16-bit integers in `a` and `b`, and store packed minimum values in `dst`.
                @Intrinsic
                public static extern func _mm_min_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed unsigned 8-bit integers in `a` and `b`, and store packed minimum values in `dst`.
                @Intrinsic
                public static extern func _mm_min_epu8(a: __m128i, b: __m128i) -> __m128i
                
                /// Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm_mulhi_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Multiply the packed unsigned 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm_mulhi_epu16(a: __m128i, b: __m128i) -> __m128i
                
                /// Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and store the low 16 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm_mullo_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Multiply the low unsigned 32-bit integers from each packed 64-bit element in `a` and `b`, and store the unsigned 64-bit results in `dst`. 
                @Intrinsic
                public static extern func _mm_mul_epu32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compute the absolute differences of packed unsigned 8-bit integers in `a` and `b`, then horizontally sum each consecutive 8 differences to produce two unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low 16 bits of 64-bit elements in `dst`.
                @Intrinsic
                public static extern func _mm_sad_epu8(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sub_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sub_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sub_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed 64-bit integers in `b` from packed 64-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sub_epi64(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_subs_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_subs_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_subs_epu8(a: __m128i, b: __m128i) -> __m128i
                
                /// Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_subs_epu16(a: __m128i, b: __m128i) -> __m128i
                
                /// Shift `a` left by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_slli_si128(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift `a` left by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_bslli_si128(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift `a` right by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_bsrli_si128(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 16-bit integers in `a` left by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_slli_epi16(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 16-bit integers in `a` left by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_sll_epi16(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 32-bit integers in `a` left by `imm8` while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_slli_epi32(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 32-bit integers in `a` left by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_sll_epi32(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 64-bit integers in `a` left by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_slli_epi64(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 64-bit integers in `a` left by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_sll_epi64(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 16-bit integers in `a` right by `imm8` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srai_epi16(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 16-bit integers in `a` right by `count` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_sra_epi16(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 32-bit integers in `a` right by `imm8` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srai_epi32(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 32-bit integers in `a` right by `count` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_sra_epi32(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift `a` right by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_srli_si128(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 16-bit integers in `a` right by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srli_epi16(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 16-bit integers in `a` right by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srl_epi16(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 32-bit integers in `a` right by `imm8` while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_srli_epi32(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 32-bit integers in `a` right by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srl_epi32(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 64-bit integers in `a` right by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srli_epi64(a: __m128i, imm8: i32) -> __m128i
                
                /// Shift packed 64-bit integers in `a` right by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srl_epi64(a: __m128i, count: __m128i) -> __m128i
                
                /// Compute the bitwise AND of 128 bits (representing integer data) in `a` and `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_and_si128(a: __m128i, b: __m128i) -> __m128i
                
                /// Compute the bitwise NOT of 128 bits (representing integer data) in `a` and then AND with `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_andnot_si128(a: __m128i, b: __m128i) -> __m128i
                
                /// Compute the bitwise OR of 128 bits (representing integer data) in `a` and `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_or_si128(a: __m128i, b: __m128i) -> __m128i
                
                /// Compute the bitwise XOR of 128 bits (representing integer data) in `a` and `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_xor_si128(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 8-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 16-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 32-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 8-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 16-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 32-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 8-bit integers in `a` and `b` for less-than, and store the results in `dst`. Note: This intrinsic emits the pcmpgtb instruction with the order of the operands switched.
                @Intrinsic
                public static extern func _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 16-bit integers in `a` and `b` for less-than, and store the results in `dst`. Note: This intrinsic emits the pcmpgtw instruction with the order of the operands switched.
                @Intrinsic
                public static extern func _mm_cmplt_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 32-bit integers in `a` and `b` for less-than, and store the results in `dst`. Note: This intrinsic emits the pcmpgtd instruction with the order of the operands switched.
                @Intrinsic
                public static extern func _mm_cmplt_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Convert packed 32-bit integers in `a` to packed double-precision (64-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi32_pd(a: __m128i) -> __m128d
                
                /// Convert the 32-bit integer `b` to a double-precision (64-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 
                @Intrinsic
                public static extern func _mm_cvtsi32_sd(a: __m128d, b: i32) -> __m128d
                
                /// Convert the 64-bit integer `b` to a double-precision (64-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 
                @Intrinsic
                public static extern func _mm_cvtsi64_sd(a: __m128d, b: i64) -> __m128d
                
                /// Convert the 64-bit integer `b` to a double-precision (64-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 
                @Intrinsic
                public static extern func _mm_cvtsi64x_sd(a: __m128d, b: i64) -> __m128d
                
                /// Convert packed 32-bit integers in `a` to packed single-precision (32-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi32_ps(a: __m128i) -> __m128
                
                /// Copy 32-bit integer `a` to the lower elements of `dst`, and zero the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_cvtsi32_si128(a: i32) -> __m128i
                
                /// Copy 64-bit integer `a` to the lower element of `dst`, and zero the upper element.
                @Intrinsic
                public static extern func _mm_cvtsi64_si128(a: i64) -> __m128i
                
                /// Copy 64-bit integer `a` to the lower element of `dst`, and zero the upper element.
                @Intrinsic
                public static extern func _mm_cvtsi64x_si128(a: i64) -> __m128i
                
                /// Copy the lower 32-bit integer in `a` to `dst`.
                @Intrinsic
                public static extern func _mm_cvtsi128_si32(a: __m128i) -> i32
                
                /// Copy the lower 64-bit integer in `a` to `dst`.
                @Intrinsic
                public static extern func _mm_cvtsi128_si64(a: __m128i) -> i64
                
                /// Copy the lower 64-bit integer in `a` to `dst`.
                @Intrinsic
                public static extern func _mm_cvtsi128_si64x(a: __m128i) -> i64
                
                /// Set packed 64-bit integers in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm_set_epi64x(e1: i64, e0: i64) -> __m128i
                
                /// Set packed 32-bit integers in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm_set_epi32(e3: i32, e2: i32, e1: i32, e0: i32) -> __m128i
                
                /// Set packed 16-bit integers in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm_set_epi16(e7: i16, e6: i16, e5: i16, e4: i16, e3: i16, e2: i16, e1: i16, e0: i16) -> __m128i
                
                /// Set packed 8-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm_set_epi8(e15: u8, e14: u8, e13: u8, e12: u8, e11: u8, e10: u8, e9: u8, e8: u8, e7: u8, e6: u8, e5: u8, e4: u8, e3: u8, e2: u8, e1: u8, e0: u8) -> __m128i
                
                /// Broadcast 64-bit integer `a` to all elements of `dst`. This intrinsic may generate the `vpbroadcastq`.
                @Intrinsic
                public static extern func _mm_set1_epi64x(a: i64) -> __m128i
                
                /// Broadcast 32-bit integer `a` to all elements of `dst`. This intrinsic may generate `vpbroadcastd`.
                @Intrinsic
                public static extern func _mm_set1_epi32(a: i32) -> __m128i
                
                /// Broadcast 16-bit integer `a` to all all elements of `dst`. This intrinsic may generate `vpbroadcastw`.
                @Intrinsic
                public static extern func _mm_set1_epi16(a: i16) -> __m128i
                
                /// Broadcast 8-bit integer `a` to all elements of `dst`. This intrinsic may generate `vpbroadcastb`.
                @Intrinsic
                public static extern func _mm_set1_epi8(a: u8) -> __m128i
                
                /// Set packed 32-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm_setr_epi32(e3: i32, e2: i32, e1: i32, e0: i32) -> __m128i
                
                /// Set packed 16-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm_setr_epi16(e7: i16, e6: i16, e5: i16, e4: i16, e3: i16, e2: i16, e1: i16, e0: i16) -> __m128i
                
                /// Set packed 8-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm_setr_epi8(e15: u8, e14: u8, e13: u8, e12: u8, e11: u8, e10: u8, e9: u8, e8: u8, e7: u8, e6: u8, e5: u8, e4: u8, e3: u8, e2: u8, e1: u8, e0: u8) -> __m128i
                
                /// Return vector of type __m128i with all elements set to zero.
                @Intrinsic
                public static extern func _mm_setzero_si128() -> __m128i
                
                /// Load 64-bit integer from memory into the first element of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_loadl_epi64(mem_addr: *__m128i) -> __m128i
                
                /// Load 128-bits of integer data from memory into `dst`.  	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_load_si128(mem_addr: *__m128i) -> __m128i
                
                /// Load 128-bits of integer data from memory into `dst`. 	`mem_addr` does not need to be aligned on any particular boundary. 	
                @Intrinsic
                public static unsafe extern func _mm_loadu_si128(mem_addr: *__m128i) -> __m128i
                
                /// Conditionally store 8-bit integer elements from `a` into memory using `mask` (elements are not stored when the highest bit is not set in the corresponding element) and a non-temporal memory hint. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_maskmoveu_si128(a: __m128i, mask: __m128i, mem_addr: *u8)
                
                /// Store 128-bits of integer data from `a` into memory.  	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_store_si128(mem_addr: *__m128i, a: __m128i)
                
                /// Store 128-bits of integer data from `a` into memory. 	`mem_addr` does not need to be aligned on any particular boundary. 	
                @Intrinsic
                public static unsafe extern func _mm_storeu_si128(mem_addr: *__m128i, a: __m128i)
                
                /// Store 64-bit integer from the first element of `a` into memory.
                @Intrinsic
                public static unsafe extern func _mm_storel_epi64(mem_addr: *__m128i, a: __m128i)
                
                /// Store 128-bits of integer data from `a` into memory using a non-temporal memory hint.  	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_stream_si128(mem_addr: *__m128i, a: __m128i)
                
                /// Store 32-bit integer `a` into memory using a non-temporal hint to minimize cache pollution. If the cache line containing address `mem_addr` is already in the cache, the cache will be updated.
                @Intrinsic
                public static unsafe extern func _mm_stream_si32(mem_addr: *i32, a: i32)
                
                /// Store 64-bit integer `a` into memory using a non-temporal hint to minimize cache pollution. If the cache line containing address `mem_addr` is already in the cache, the cache will be updated.
                @Intrinsic
                public static unsafe extern func _mm_stream_si64(mem_addr: *i64, a: i64)
                
                /// Copy the lower 64-bit integer in `a` to the lower element of `dst`, and zero the upper element.
                @Intrinsic
                public static extern func _mm_move_epi64(a: __m128i) -> __m128i
                
                /// Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_packs_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_packs_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using unsigned saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_packus_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Extract a 16-bit integer from `a`, selected with `imm8`, and store the result in the lower element of `dst`.
                @Intrinsic
                public static extern func _mm_extract_epi16(a: __m128i, imm8: i32) -> i32
                
                /// Copy `a` to `dst`, and insert the 16-bit integer `i` into `dst` at the location specified by `imm8`. 
                @Intrinsic
                public static extern func _mm_insert_epi16(a: __m128i, i: i32, imm8: i32) -> __m128i
                
                /// Create mask from the most significant bit of each 8-bit element in `a`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_movemask_epi8(a: __m128i) -> i32
                
                /// Shuffle 32-bit integers in `a` using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_shuffle_epi32(a: __m128i, imm8: i32) -> __m128i
                
                /// Shuffle 16-bit integers in the high 64 bits of `a` using the control in `imm8`. Store the results in the high 64 bits of `dst`, with the low 64 bits being copied from from `a` to `dst`.
                @Intrinsic
                public static extern func _mm_shufflehi_epi16(a: __m128i, imm8: i32) -> __m128i
                
                /// Shuffle 16-bit integers in the low 64 bits of `a` using the control in `imm8`. Store the results in the low 64 bits of `dst`, with the high 64 bits being copied from from `a` to `dst`.
                @Intrinsic
                public static extern func _mm_shufflelo_epi16(a: __m128i, imm8: i32) -> __m128i
                
                /// Unpack and interleave 8-bit integers from the high half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpackhi_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Unpack and interleave 16-bit integers from the high half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpackhi_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Unpack and interleave 32-bit integers from the high half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpackhi_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Unpack and interleave 64-bit integers from the high half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpackhi_epi64(a: __m128i, b: __m128i) -> __m128i
                
                /// Unpack and interleave 8-bit integers from the low half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpacklo_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Unpack and interleave 16-bit integers from the low half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpacklo_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Unpack and interleave 32-bit integers from the low half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpacklo_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Unpack and interleave 64-bit integers from the low half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpacklo_epi64(a: __m128i, b: __m128i) -> __m128i
                
                /// Add the lower double-precision (64-bit) floating-point element in `a` and `b`, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 
                @Intrinsic
                public static extern func _mm_add_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Add packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_add_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Divide the lower double-precision (64-bit) floating-point element in `a` by the lower double-precision (64-bit) floating-point element in `b`, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 
                @Intrinsic
                public static extern func _mm_div_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Divide packed double-precision (64-bit) floating-point elements in `a` by packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_div_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b`, store the maximum value in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_max_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm_max_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b`, store the minimum value in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_min_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm_min_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Multiply the lower double-precision (64-bit) floating-point element in `a` and `b`, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_mul_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_mul_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compute the square root of the lower double-precision (64-bit) floating-point element in `b`, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_sqrt_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compute the square root of packed double-precision (64-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sqrt_pd(a: __m128d) -> __m128d
                
                /// Subtract the lower double-precision (64-bit) floating-point element in `b` from the lower double-precision (64-bit) floating-point element in `a`, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_sub_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Subtract packed double-precision (64-bit) floating-point elements in `b` from packed double-precision (64-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_sub_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compute the bitwise AND of packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_and_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compute the bitwise NOT of packed double-precision (64-bit) floating-point elements in `a` and then AND with `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_andnot_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compute the bitwise OR of packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_or_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compute the bitwise XOR of packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_xor_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for equality, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for less-than, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmplt_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for less-than-or-equal, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmple_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for greater-than, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for greater-than-or-equal, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpge_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` to see if neither is NaN, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpord_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` to see if either is NaN, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpunord_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for not-equal, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpneq_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for not-less-than, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpnlt_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for not-less-than-or-equal, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpnle_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for not-greater-than, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpngt_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point elements in `a` and `b` for not-greater-than-or-equal, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmpnge_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for less-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmplt_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for less-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmple_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for greater-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpge_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` to see if neither is NaN, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpord_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` to see if either is NaN, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpunord_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for not-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpneq_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for not-less-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpnlt_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for not-less-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpnle_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for not-greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpngt_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` for not-greater-than-or-equal, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpnge_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for equality, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comieq_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for less-than, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comilt_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for less-than-or-equal, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comile_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for greater-than, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comigt_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for greater-than-or-equal, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comige_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for not-equal, and return the boolean result (0 or 1).
                @Intrinsic
                public static extern func _mm_comineq_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for equality, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomieq_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for less-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomilt_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for less-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomile_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for greater-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomigt_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for greater-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomige_sd(a: __m128d, b: __m128d) -> i32
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` for not-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs.
                @Intrinsic
                public static extern func _mm_ucomineq_sd(a: __m128d, b: __m128d) -> i32
                
                /// Convert packed double-precision (64-bit) floating-point elements in `a` to packed single-precision (32-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtpd_ps(a: __m128d) -> __m128
                
                /// Convert packed single-precision (32-bit) floating-point elements in `a` to packed double-precision (64-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtps_pd(a: __m128) -> __m128d
                
                /// Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtpd_epi32(a: __m128d) -> __m128i
                
                /// Convert the lower double-precision (64-bit) floating-point element in `a` to a 32-bit integer, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvtsd_si32(a: __m128d) -> i32
                
                /// Convert the lower double-precision (64-bit) floating-point element in `a` to a 64-bit integer, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvtsd_si64(a: __m128d) -> i64
                
                /// Convert the lower double-precision (64-bit) floating-point element in `a` to a 64-bit integer, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvtsd_si64x(a: __m128d) -> i64
                
                /// Convert the lower double-precision (64-bit) floating-point element in `b` to a single-precision (32-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 	
                @Intrinsic
                public static extern func _mm_cvtsd_ss(a: __m128, b: __m128d) -> __m128
                
                /// Copy the lower double-precision (64-bit) floating-point element of `a` to `dst`.
                @Intrinsic
                public static extern func _mm_cvtsd_f64(a: __m128d) -> f64
                
                /// Convert the lower single-precision (32-bit) floating-point element in `b` to a double-precision (64-bit) floating-point element, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 	
                @Intrinsic
                public static extern func _mm_cvtss_sd(a: __m128d, b: __m128) -> __m128d
                
                /// Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers with truncation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvttpd_epi32(a: __m128d) -> __m128i
                
                /// Convert the lower double-precision (64-bit) floating-point element in `a` to a 32-bit integer with truncation, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvttsd_si32(a: __m128d) -> i32
                
                /// Convert the lower double-precision (64-bit) floating-point element in `a` to a 64-bit integer with truncation, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvttsd_si64(a: __m128d) -> i64
                
                /// Convert the lower double-precision (64-bit) floating-point element in `a` to a 64-bit integer with truncation, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_cvttsd_si64x(a: __m128d) -> i64
                
                /// Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtps_epi32(a: __m128) -> __m128i
                
                /// Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvttps_epi32(a: __m128) -> __m128i
                
                /// Copy double-precision (64-bit) floating-point element `a` to the lower element of `dst`, and zero the upper element.
                @Intrinsic
                public static extern func _mm_set_sd(a: f64) -> __m128d
                
                /// Broadcast double-precision (64-bit) floating-point value `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_set1_pd(a: f64) -> __m128d
                
                /// Broadcast double-precision (64-bit) floating-point value `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_set_pd1(a: f64) -> __m128d
                
                /// Set packed double-precision (64-bit) floating-point elements in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm_set_pd(e1: f64, e0: f64) -> __m128d
                
                /// Set packed double-precision (64-bit) floating-point elements in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm_setr_pd(e1: f64, e0: f64) -> __m128d
                
                /// Return vector of type __m128d with all elements set to zero.
                @Intrinsic
                public static extern func _mm_setzero_pd() -> __m128d
                
                /// Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into `dst`. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_load_pd(mem_addr: *f64) -> __m128d
                
                /// Load a double-precision (64-bit) floating-point element from memory into both elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_load1_pd(mem_addr: *f64) -> __m128d
                
                /// Load a double-precision (64-bit) floating-point element from memory into both elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_load_pd1(mem_addr: *f64) -> __m128d
                
                /// Load 2 double-precision (64-bit) floating-point elements from memory into `dst` in reverse order. mem_addr must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_loadr_pd(mem_addr: *f64) -> __m128d
                
                /// Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into `dst`. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_loadu_pd(mem_addr: *f64) -> __m128d
                
                /// Load a double-precision (64-bit) floating-point element from memory into the lower of `dst`, and zero the upper element. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_load_sd(mem_addr: *f64) -> __m128d
                
                /// Load a double-precision (64-bit) floating-point element from memory into the upper element of `dst`, and copy the lower element from `a` to `dst`. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_loadh_pd(a: __m128d, mem_addr: *f64) -> __m128d
                
                /// Load a double-precision (64-bit) floating-point element from memory into the lower element of `dst`, and copy the upper element from `a` to `dst`. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_loadl_pd(a: __m128d, mem_addr: *f64) -> __m128d
                
                /// Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory using a non-temporal memory hint. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_stream_pd(mem_addr: *f64, a: __m128d)
                
                /// Store the lower double-precision (64-bit) floating-point element from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_store_sd(mem_addr: *f64, a: __m128d)
                
                /// Store the lower double-precision (64-bit) floating-point element from `a` into 2 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_store1_pd(mem_addr: *f64, a: __m128d)
                
                /// Store the lower double-precision (64-bit) floating-point element from `a` into 2 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_store_pd1(mem_addr: *f64, a: __m128d)
                
                /// Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_store_pd(mem_addr: *f64, a: __m128d)
                
                /// Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_storeu_pd(mem_addr: *f64, a: __m128d)
                
                /// Store 2 double-precision (64-bit) floating-point elements from `a` into memory in reverse order. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_storer_pd(mem_addr: *f64, a: __m128d)
                
                /// Store the upper double-precision (64-bit) floating-point element from `a` into memory.
                @Intrinsic
                public static unsafe extern func _mm_storeh_pd(mem_addr: *f64, a: __m128d)
                
                /// Store the lower double-precision (64-bit) floating-point element from `a` into memory.
                @Intrinsic
                public static unsafe extern func _mm_storel_pd(mem_addr: *f64, a: __m128d)
                
                /// Unpack and interleave double-precision (64-bit) floating-point elements from the high half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpackhi_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Unpack and interleave double-precision (64-bit) floating-point elements from the low half of `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_unpacklo_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Set each bit of mask `dst` based on the most significant bit of the corresponding packed double-precision (64-bit) floating-point element in `a`.
                @Intrinsic
                public static extern func _mm_movemask_pd(a: __m128d) -> i32
                
                /// Shuffle double-precision (64-bit) floating-point elements using the control in `imm8`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_shuffle_pd(a: __m128d, b: __m128d, imm8: i32) -> __m128d
                
                /// Move the lower double-precision (64-bit) floating-point element from `b` to the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_move_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Cast vector of type __m128d to type __m128. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm_castpd_ps(a: __m128d) -> __m128
                
                /// Cast vector of type __m128d to type __m128i. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm_castpd_si128(a: __m128d) -> __m128i
                
                /// Cast vector of type __m128 to type __m128d. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm_castps_pd(a: __m128) -> __m128d
                
                /// Cast vector of type __m128 to type __m128i. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm_castps_si128(a: __m128) -> __m128i
                
                /// Cast vector of type __m128i to type __m128d. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm_castsi128_pd(a: __m128i) -> __m128d
                
                /// Cast vector of type __m128i to type __m128. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm_castsi128_ps(a: __m128i) -> __m128
            }
            
            public partial module sse3
            {
                
                /// Alternatively add and subtract packed single-precision (32-bit) floating-point elements in `a` to/from packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_addsub_ps(a: __m128, b: __m128) -> __m128
                
                /// Alternatively add and subtract packed double-precision (64-bit) floating-point elements in `a` to/from packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_addsub_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Horizontally add adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm_hadd_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm_hadd_ps(a: __m128, b: __m128) -> __m128
                
                /// Horizontally subtract adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm_hsub_pd(a: __m128d, b: __m128d) -> __m128d
                
                /// Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm_hsub_ps(a: __m128, b: __m128) -> __m128
                
                /// Load 128-bits of integer data from unaligned memory into `dst`. This intrinsic may perform better than `_mm_loadu_si128` when the data crosses a cache line boundary.
                @Intrinsic
                public static unsafe extern func _mm_lddqu_si128(mem_addr: *__m128i) -> __m128i
                
                /// Duplicate the low double-precision (64-bit) floating-point element from `a`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_movedup_pd(a: __m128d) -> __m128d
                
                /// Load a double-precision (64-bit) floating-point element from memory into both elements of `dst`. 	
                @Intrinsic
                public static unsafe extern func _mm_loaddup_pd(mem_addr: *f64) -> __m128d
                
                /// Duplicate odd-indexed single-precision (32-bit) floating-point elements from `a`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_movehdup_ps(a: __m128) -> __m128
                
                /// Duplicate even-indexed single-precision (32-bit) floating-point elements from `a`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm_moveldup_ps(a: __m128) -> __m128
            }
            
            public partial module ssse3
            {
                
                /// Compute the absolute value of packed 8-bit integers in `a`, and store the unsigned results in `dst`. 
                @Intrinsic
                public static extern func _mm_abs_epi8(a: __m128i) -> __m128i
                
                /// Compute the absolute value of packed 16-bit integers in `a`, and store the unsigned results in `dst`. 
                @Intrinsic
                public static extern func _mm_abs_epi16(a: __m128i) -> __m128i
                
                /// Compute the absolute value of packed 32-bit integers in `a`, and store the unsigned results in `dst`. 
                @Intrinsic
                public static extern func _mm_abs_epi32(a: __m128i) -> __m128i
                
                /// Shuffle packed 8-bit integers in `a` according to shuffle control mask in the corresponding 8-bit element of `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_shuffle_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Concatenate 16-byte blocks in `a` and `b` into a 32-byte temporary result, shift the result right by `count` bytes, and store the low 16 bytes in `dst`. 
                @Intrinsic
                public static extern func _mm_alignr_epi8(a: __m128i, b: __m128i, count: i32) -> __m128i
                
                /// Horizontally add adjacent pairs of 16-bit integers in `a` and `b`, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm_hadd_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Horizontally add adjacent pairs of 16-bit integers in `a` and `b` using saturation, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm_hadds_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Horizontally add adjacent pairs of 32-bit integers in `a` and `b`, and pack the signed 32-bit results in `dst`.
                @Intrinsic
                public static extern func _mm_hadd_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b`, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm_hsub_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b` using saturation, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm_hsubs_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Horizontally subtract adjacent pairs of 32-bit integers in `a` and `b`, and pack the signed 32-bit results in `dst`.
                @Intrinsic
                public static extern func _mm_hsub_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Vertically multiply each unsigned 8-bit integer from `a` with the corresponding signed 8-bit integer from `b`, producing intermediate signed 16-bit integers. Horizontally add adjacent pairs of intermediate signed 16-bit integers, and pack the saturated results in `dst`. 	
                @Intrinsic
                public static extern func _mm_maddubs_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Multiply packed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Truncate each intermediate integer to the 18 most significant bits, round by adding 1, and store bits [16:1] to `dst`. 
                @Intrinsic
                public static extern func _mm_mulhrs_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and store the results in `dst`. Element in `dst` are zeroed out when the corresponding element in `b` is zero.
                @Intrinsic
                public static extern func _mm_sign_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and store the results in `dst`. Element in `dst` are zeroed out when the corresponding element in `b` is zero.
                @Intrinsic
                public static extern func _mm_sign_epi16(a: __m128i, b: __m128i) -> __m128i
                
                /// Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and store the results in `dst`. Element in `dst` are zeroed out when the corresponding element in `b` is zero.
                @Intrinsic
                public static extern func _mm_sign_epi32(a: __m128i, b: __m128i) -> __m128i
            }
            
            public partial module sse41
            {
                
                /// Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_blend_pd(a: __m128d, b: __m128d, imm8: i32) -> __m128d
                
                /// Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_blend_ps(a: __m128, b: __m128, imm8: i32) -> __m128
                
                /// Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using `mask`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_blendv_pd(a: __m128d, b: __m128d, mask: __m128d) -> __m128d
                
                /// Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using `mask`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_blendv_ps(a: __m128, b: __m128, mask: __m128) -> __m128
                
                /// Blend packed 8-bit integers from `a` and `b` using `mask`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_blendv_epi8(a: __m128i, b: __m128i, mask: __m128i) -> __m128i
                
                /// Blend packed 16-bit integers from `a` and `b` using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_blend_epi16(a: __m128i, b: __m128i, imm8: i32) -> __m128i
                
                /// Conditionally multiply the packed double-precision (64-bit) floating-point elements in `a` and `b` using the high 4 bits in `imm8`, sum the four products, and conditionally store the sum in `dst` using the low 4 bits of `imm8`.
                @Intrinsic
                public static extern func _mm_dp_pd(a: __m128d, b: __m128d, imm8: i32) -> __m128d
                
                /// Conditionally multiply the packed single-precision (32-bit) floating-point elements in `a` and `b` using the high 4 bits in `imm8`, sum the four products, and conditionally store the sum in `dst` using the low 4 bits of `imm8`.
                @Intrinsic
                public static extern func _mm_dp_ps(a: __m128, b: __m128, imm8: i32) -> __m128
                
                /// Extract a single-precision (32-bit) floating-point element from `a`, selected with `imm8`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_extract_ps(a: __m128, imm8: i32) -> i32
                
                /// Extract an 8-bit integer from `a`, selected with `imm8`, and store the result in the lower element of `dst`.
                @Intrinsic
                public static extern func _mm_extract_epi8(a: __m128i, imm8: i32) -> i32
                
                /// Extract a 32-bit integer from `a`, selected with `imm8`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_extract_epi32(a: __m128i, imm8: i32) -> i32
                
                /// Extract a 64-bit integer from `a`, selected with `imm8`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm_extract_epi64(a: __m128i, imm8: i32) -> i64
                
                /// Copy `a` to `tmp`, then insert a single-precision (32-bit) floating-point element from `b` into `tmp` using the control in `imm8`. Store `tmp` to `dst` using the mask in `imm8` (elements are zeroed out when the corresponding bit is set). 
                @Intrinsic
                public static extern func _mm_insert_ps(a: __m128, b: __m128, imm8: i32) -> __m128
                
                /// Copy `a` to `dst`, and insert the lower 8-bit integer from `i` into `dst` at the location specified by `imm8`. 
                @Intrinsic
                public static extern func _mm_insert_epi8(a: __m128i, i: i32, imm8: i32) -> __m128i
                
                /// Copy `a` to `dst`, and insert the 32-bit integer `i` into `dst` at the location specified by `imm8`. 
                @Intrinsic
                public static extern func _mm_insert_epi32(a: __m128i, i: i32, imm8: i32) -> __m128i
                
                /// Copy `a` to `dst`, and insert the 64-bit integer `i` into `dst` at the location specified by `imm8`. 
                @Intrinsic
                public static extern func _mm_insert_epi64(a: __m128i, i: i64, imm8: i32) -> __m128i
                
                /// Compare packed 8-bit integers in `a` and `b`, and store packed maximum values in `dst`. 
                @Intrinsic
                public static extern func _mm_max_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 32-bit integers in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm_max_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed unsigned 32-bit integers in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm_max_epu32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed unsigned 16-bit integers in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm_max_epu16(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 8-bit integers in `a` and `b`, and store packed minimum values in `dst`.
                @Intrinsic
                public static extern func _mm_min_epi8(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 32-bit integers in `a` and `b`, and store packed minimum values in `dst`.
                @Intrinsic
                public static extern func _mm_min_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed unsigned 32-bit integers in `a` and `b`, and store packed minimum values in `dst`.
                @Intrinsic
                public static extern func _mm_min_epu32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed unsigned 16-bit integers in `a` and `b`, and store packed minimum values in `dst`.
                @Intrinsic
                public static extern func _mm_min_epu16(a: __m128i, b: __m128i) -> __m128i
                
                /// Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using unsigned saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_packus_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compare packed 64-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpeq_epi64(a: __m128i, b: __m128i) -> __m128i
                
                /// Sign extend packed 8-bit integers in `a` to packed 16-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi8_epi16(a: __m128i) -> __m128i
                
                /// Sign extend packed 8-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi8_epi32(a: __m128i) -> __m128i
                
                /// Sign extend packed 8-bit integers in the low 8 bytes of `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi8_epi64(a: __m128i) -> __m128i
                
                /// Sign extend packed 16-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi16_epi32(a: __m128i) -> __m128i
                
                /// Sign extend packed 16-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi16_epi64(a: __m128i) -> __m128i
                
                /// Sign extend packed 32-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepi32_epi64(a: __m128i) -> __m128i
                
                /// Zero extend packed unsigned 8-bit integers in `a` to packed 16-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepu8_epi16(a: __m128i) -> __m128i
                
                /// Zero extend packed unsigned 8-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepu8_epi32(a: __m128i) -> __m128i
                
                /// Zero extend packed unsigned 8-bit integers in the low 8 byte sof `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepu8_epi64(a: __m128i) -> __m128i
                
                /// Zero extend packed unsigned 16-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepu16_epi32(a: __m128i) -> __m128i
                
                /// Zero extend packed unsigned 16-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepu16_epi64(a: __m128i) -> __m128i
                
                /// Zero extend packed unsigned 32-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cvtepu32_epi64(a: __m128i) -> __m128i
                
                /// Multiply the low 32-bit integers from each packed 64-bit element in `a` and `b`, and store the signed 64-bit results in `dst`. 
                @Intrinsic
                public static extern func _mm_mul_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Multiply the packed 32-bit integers in `a` and `b`, producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm_mullo_epi32(a: __m128i, b: __m128i) -> __m128i
                
                /// Compute the bitwise AND of 128 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `ZF` value.
                @Intrinsic
                public static extern func _mm_testz_si128(a: __m128i, b: __m128i) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `CF` value.
                @Intrinsic
                public static extern func _mm_testc_si128(a: __m128i, b: __m128i) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm_testnzc_si128(a: __m128i, b: __m128i) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing integer data) in `a` and `mask`, and return 1 if the result is zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm_test_all_zeros(a: __m128i, mask: __m128i) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing integer data) in `a` and `mask`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `mask`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm_test_mix_ones_zeros(a: __m128i, mask: __m128i) -> i32
                
                /// Compute the bitwise NOT of `a` and then AND with a 128-bit vector containing all 1's, and return 1 if the result is zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm_test_all_ones(a: __m128i) -> i32
                
                /// Round the packed double-precision (64-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed double-precision floating-point elements in `dst`. 	[round_note] 	
                @Intrinsic
                public static extern func _mm_round_pd(a: __m128d, rounding: i32) -> __m128d
                
                /// Round the packed double-precision (64-bit) floating-point elements in `a` down to an integer value, and store the results as packed double-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm_floor_pd(a: __m128d) -> __m128d
                
                /// Round the packed double-precision (64-bit) floating-point elements in `a` up to an integer value, and store the results as packed double-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm_ceil_pd(a: __m128d) -> __m128d
                
                /// Round the packed single-precision (32-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed single-precision floating-point elements in `dst`. 	[round_note] 	
                @Intrinsic
                public static extern func _mm_round_ps(a: __m128, rounding: i32) -> __m128
                
                /// Round the packed single-precision (32-bit) floating-point elements in `a` down to an integer value, and store the results as packed single-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm_floor_ps(a: __m128) -> __m128
                
                /// Round the packed single-precision (32-bit) floating-point elements in `a` up to an integer value, and store the results as packed single-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm_ceil_ps(a: __m128) -> __m128
                
                /// Round the lower double-precision (64-bit) floating-point element in `b` using the `rounding` parameter, store the result as a double-precision floating-point element in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`. 	[round_note] 	
                @Intrinsic
                public static extern func _mm_round_sd(a: __m128d, b: __m128d, rounding: i32) -> __m128d
                
                /// Round the lower double-precision (64-bit) floating-point element in `b` down to an integer value, store the result as a double-precision floating-point element in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_floor_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Round the lower double-precision (64-bit) floating-point element in `b` up to an integer value, store the result as a double-precision floating-point element in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_ceil_sd(a: __m128d, b: __m128d) -> __m128d
                
                /// Round the lower single-precision (32-bit) floating-point element in `b` using the `rounding` parameter, store the result as a single-precision floating-point element in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`. 	[round_note] 	
                @Intrinsic
                public static extern func _mm_round_ss(a: __m128, b: __m128, rounding: i32) -> __m128
                
                /// Round the lower single-precision (32-bit) floating-point element in `b` down to an integer value, store the result as a single-precision floating-point element in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_floor_ss(a: __m128, b: __m128) -> __m128
                
                /// Round the lower single-precision (32-bit) floating-point element in `b` up to an integer value, store the result as a single-precision floating-point element in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`.
                @Intrinsic
                public static extern func _mm_ceil_ss(a: __m128, b: __m128) -> __m128
                
                /// Horizontally compute the minimum amongst the packed unsigned 16-bit integers in `a`, store the minimum and index in `dst`, and zero the remaining bits in `dst`.
                @Intrinsic
                public static extern func _mm_minpos_epu16(a: __m128i) -> __m128i
                
                /// Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in `a` compared to those in `b`, and store the 16-bit results in `dst`. 	Eight SADs are performed using one quadruplet from `b` and eight quadruplets from `a`. One quadruplet is selected from `b` starting at on the offset specified in `imm8`. Eight quadruplets are formed from sequential 8-bit integers selected from `a` starting at the offset specified in `imm8`.
                @Intrinsic
                public static extern func _mm_mpsadbw_epu8(a: __m128i, b: __m128i, imm8: i32) -> __m128i
                
                /// Load 128-bits of integer data from memory into `dst` using a non-temporal memory hint. 	`mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm_stream_load_si128(mem_addr: *__m128i) -> __m128i
            }
            
            public partial module sse42
            {
                
                /// Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and store the generated mask in `dst`. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpistrm(a: __m128i, b: __m128i, imm8: i32) -> __m128i
                
                /// Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and store the generated index in `dst`. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpistri(a: __m128i, b: __m128i, imm8: i32) -> i32
                
                /// Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and returns 1 if any character in `b` was null, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpistrz(a: __m128i, b: __m128i, imm8: i32) -> i32
                
                /// Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and returns 1 if the resulting mask was non-zero, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpistrc(a: __m128i, b: __m128i, imm8: i32) -> i32
                
                /// Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and returns 1 if any character in `a` was null, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpistrs(a: __m128i, b: __m128i, imm8: i32) -> i32
                
                /// Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and returns bit 0 of the resulting bit mask. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpistro(a: __m128i, b: __m128i, imm8: i32) -> i32
                
                /// Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and returns 1 if `b` did not contain a null character and the resulting mask was zero, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpistra(a: __m128i, b: __m128i, imm8: i32) -> i32
                
                /// Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and store the generated mask in `dst`. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpestrm(a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> __m128i
                
                /// Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and store the generated index in `dst`. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpestri(a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32
                
                /// Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and returns 1 if any character in `b` was null, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpestrz(a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32
                
                /// Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and returns 1 if the resulting mask was non-zero, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpestrc(a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32
                
                /// Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and returns 1 if any character in `a` was null, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpestrs(a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32
                
                /// Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and returns bit 0 of the resulting bit mask. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpestro(a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32
                
                /// Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and returns 1 if `b` did not contain a null character and the resulting mask was zero, and 0 otherwise. 	[strcmp_note] 	
                @Intrinsic
                public static extern func _mm_cmpestra(a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32
                
                /// Compare packed 64-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmpgt_epi64(a: __m128i, b: __m128i) -> __m128i
                
                /// Starting with the initial value in `crc`, accumulates a CRC32 value for unsigned 8-bit integer `v`, and stores the result in `dst`.
                @Intrinsic
                public static extern func _mm_crc32_u8(crc: u32, v: u8) -> u32
                
                /// Starting with the initial value in `crc`, accumulates a CRC32 value for unsigned 16-bit integer `v`, and stores the result in `dst`.
                @Intrinsic
                public static extern func _mm_crc32_u16(crc: u32, v: u16) -> u32
                
                /// Starting with the initial value in `crc`, accumulates a CRC32 value for unsigned 32-bit integer `v`, and stores the result in `dst`.
                @Intrinsic
                public static extern func _mm_crc32_u32(crc: u32, v: u32) -> u32
                
                /// Starting with the initial value in `crc`, accumulates a CRC32 value for unsigned 64-bit integer `v`, and stores the result in `dst`.
                @Intrinsic
                public static extern func _mm_crc32_u64(crc: u64, v: u64) -> u64
            }
            
            public partial module avx
            {
                
                /// Add packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_add_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Add packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_add_ps(a: __m256, b: __m256) -> __m256
                
                /// Alternatively add and subtract packed double-precision (64-bit) floating-point elements in `a` to/from packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_addsub_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Alternatively add and subtract packed single-precision (32-bit) floating-point elements in `a` to/from packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_addsub_ps(a: __m256, b: __m256) -> __m256
                
                /// Compute the bitwise AND of packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_and_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Compute the bitwise AND of packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_and_ps(a: __m256, b: __m256) -> __m256
                
                /// Compute the bitwise NOT of packed double-precision (64-bit) floating-point elements in `a` and then AND with `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_andnot_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Compute the bitwise NOT of packed single-precision (32-bit) floating-point elements in `a` and then AND with `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_andnot_ps(a: __m256, b: __m256) -> __m256
                
                /// Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_blend_pd(a: __m256d, b: __m256d, imm8: i32) -> __m256d
                
                /// Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_blend_ps(a: __m256, b: __m256, imm8: i32) -> __m256
                
                /// Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using `mask`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_blendv_pd(a: __m256d, b: __m256d, mask: __m256d) -> __m256d
                
                /// Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using `mask`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_blendv_ps(a: __m256, b: __m256, mask: __m256) -> __m256
                
                /// Divide packed double-precision (64-bit) floating-point elements in `a` by packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_div_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Divide packed single-precision (32-bit) floating-point elements in `a` by packed elements in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_div_ps(a: __m256, b: __m256) -> __m256
                
                /// Conditionally multiply the packed single-precision (32-bit) floating-point elements in `a` and `b` using the high 4 bits in `imm8`, sum the four products, and conditionally store the sum in `dst` using the low 4 bits of `imm8`.
                @Intrinsic
                public static extern func _mm256_dp_ps(a: __m256, b: __m256, imm8: i32) -> __m256
                
                /// Horizontally add adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm256_hadd_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm256_hadd_ps(a: __m256, b: __m256) -> __m256
                
                /// Horizontally subtract adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm256_hsub_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results in `dst`.
                @Intrinsic
                public static extern func _mm256_hsub_ps(a: __m256, b: __m256) -> __m256
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm256_max_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm256_max_ps(a: __m256, b: __m256) -> __m256
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_ps(a: __m256, b: __m256) -> __m256
                
                /// Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_mul_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_mul_ps(a: __m256, b: __m256) -> __m256
                
                /// Compute the bitwise OR of packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_or_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Compute the bitwise OR of packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_or_ps(a: __m256, b: __m256) -> __m256
                
                /// Shuffle double-precision (64-bit) floating-point elements within 128-bit lanes using the control in `imm8`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_shuffle_pd(a: __m256d, b: __m256d, imm8: i32) -> __m256d
                
                /// Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_shuffle_ps(a: __m256, b: __m256, imm8: i32) -> __m256
                
                /// Subtract packed double-precision (64-bit) floating-point elements in `b` from packed double-precision (64-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sub_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Subtract packed single-precision (32-bit) floating-point elements in `b` from packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sub_ps(a: __m256, b: __m256) -> __m256
                
                /// Compute the bitwise XOR of packed double-precision (64-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_xor_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Compute the bitwise XOR of packed single-precision (32-bit) floating-point elements in `a` and `b`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_xor_ps(a: __m256, b: __m256) -> __m256
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmp_pd(a: __m128d, b: __m128d, imm8: i32) -> __m128d
                
                /// Compare packed double-precision (64-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmp_pd(a: __m256d, b: __m256d, imm8: i32) -> __m256d
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_cmp_ps(a: __m128, b: __m128, imm8: i32) -> __m128
                
                /// Compare packed single-precision (32-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmp_ps(a: __m256, b: __m256, imm8: i32) -> __m256
                
                /// Compare the lower double-precision (64-bit) floating-point element in `a` and `b` based on the comparison operand specified by `imm8`, store the result in the lower element of `dst`, and copy the upper element from `a` to the upper element of `dst`.
                @Intrinsic
                public static extern func _mm_cmp_sd(a: __m128d, b: __m128d, imm8: i32) -> __m128d
                
                /// Compare the lower single-precision (32-bit) floating-point element in `a` and `b` based on the comparison operand specified by `imm8`, store the result in the lower element of `dst`, and copy the upper 3 packed elements from `a` to the upper elements of `dst`. 
                @Intrinsic
                public static extern func _mm_cmp_ss(a: __m128, b: __m128, imm8: i32) -> __m128
                
                /// Convert packed 32-bit integers in `a` to packed double-precision (64-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi32_pd(a: __m128i) -> __m256d
                
                /// Convert packed 32-bit integers in `a` to packed single-precision (32-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi32_ps(a: __m256i) -> __m256
                
                /// Convert packed double-precision (64-bit) floating-point elements in `a` to packed single-precision (32-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtpd_ps(a: __m256d) -> __m128
                
                /// Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtps_epi32(a: __m256) -> __m256i
                
                /// Convert packed single-precision (32-bit) floating-point elements in `a` to packed double-precision (64-bit) floating-point elements, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtps_pd(a: __m128) -> __m256d
                
                /// Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers with truncation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvttpd_epi32(a: __m256d) -> __m128i
                
                /// Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtpd_epi32(a: __m256d) -> __m128i
                
                /// Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvttps_epi32(a: __m256) -> __m256i
                
                /// Extract 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `a`, selected with `imm8`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extractf128_ps(a: __m256, imm8: i32) -> __m128
                
                /// Extract 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a`, selected with `imm8`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extractf128_pd(a: __m256d, imm8: i32) -> __m128d
                
                /// Extract 128 bits (composed of integer data) from `a`, selected with `imm8`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extractf128_si256(a: __m256i, imm8: i32) -> __m128i
            }
            
            public partial module avx2
            {
                
                /// Extract an 8-bit integer from `a`, selected with `index`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extract_epi8(a: __m256i, index: i32) -> i32
                
                /// Extract a 16-bit integer from `a`, selected with `index`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extract_epi16(a: __m256i, index: i32) -> i32
            }
            
            public partial module avx
            {
                
                /// Extract a 32-bit integer from `a`, selected with `index`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extract_epi32(a: __m256i, index: i32) -> i32
                
                /// Extract a 64-bit integer from `a`, selected with `index`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extract_epi64(a: __m256i, index: i32) -> i64
                
                /// Zero the contents of all XMM or YMM registers.
                @Intrinsic
                public static extern func _mm256_zeroall()
                
                /// Zero the upper 128 bits of all YMM registers; the lower 128-bits of the registers are unmodified.
                @Intrinsic
                public static extern func _mm256_zeroupper()
                
                /// Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_permutevar_ps(a: __m256, b: __m256i) -> __m256
                
                /// Shuffle single-precision (32-bit) floating-point elements in `a` using the control in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_permutevar_ps(a: __m128, b: __m128i) -> __m128
                
                /// Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_permute_ps(a: __m256, imm8: i32) -> __m256
                
                /// Shuffle single-precision (32-bit) floating-point elements in `a` using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_permute_ps(a: __m128, imm8: i32) -> __m128
                
                /// Shuffle double-precision (64-bit) floating-point elements in `a` within 128-bit lanes using the control in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_permutevar_pd(a: __m256d, b: __m256i) -> __m256d
                
                /// Shuffle double-precision (64-bit) floating-point elements in `a` using the control in `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_permutevar_pd(a: __m128d, b: __m128i) -> __m128d
                
                /// Shuffle double-precision (64-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_permute_pd(a: __m256d, imm8: i32) -> __m256d
                
                /// Shuffle double-precision (64-bit) floating-point elements in `a` using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_permute_pd(a: __m128d, imm8: i32) -> __m128d
                
                /// Shuffle 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) selected by `imm8` from `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_permute2f128_ps(a: __m256, b: __m256, imm8: i32) -> __m256
                
                /// Shuffle 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) selected by `imm8` from `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_permute2f128_pd(a: __m256d, b: __m256d, imm8: i32) -> __m256d
                
                /// Shuffle 128-bits (composed of integer data) selected by `imm8` from `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_permute2f128_si256(a: __m256i, b: __m256i, imm8: i32) -> __m256i
                
                /// Broadcast a single-precision (32-bit) floating-point element from memory to all elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm256_broadcast_ss(mem_addr: *f32) -> __m256
                
                /// Broadcast a single-precision (32-bit) floating-point element from memory to all elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_broadcast_ss(mem_addr: *f32) -> __m128
                
                /// Broadcast a double-precision (64-bit) floating-point element from memory to all elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm256_broadcast_sd(mem_addr: *f64) -> __m256d
                
                /// Broadcast 128 bits from memory (composed of 4 packed single-precision (32-bit) floating-point elements) to all elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm256_broadcast_ps(mem_addr: *__m128) -> __m256
                
                /// Broadcast 128 bits from memory (composed of 2 packed double-precision (64-bit) floating-point elements) to all elements of `dst`.
                @Intrinsic
                public static unsafe extern func _mm256_broadcast_pd(mem_addr: *__m128d) -> __m256d
                
                /// Copy `a` to `dst`, then insert 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `b` into `dst` at the location specified by `imm8`.
                @Intrinsic
                public static extern func _mm256_insertf128_ps(a: __m256, b: __m128, imm8: i32) -> __m256
                
                /// Copy `a` to `dst`, then insert 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `b` into `dst` at the location specified by `imm8`.
                @Intrinsic
                public static extern func _mm256_insertf128_pd(a: __m256d, b: __m128d, imm8: i32) -> __m256d
                
                /// Copy `a` to `dst`, then insert 128 bits from `b` into `dst` at the location specified by `imm8`.
                @Intrinsic
                public static extern func _mm256_insertf128_si256(a: __m256i, b: __m128i, imm8: i32) -> __m256i
                
                /// Copy `a` to `dst`, and insert the 8-bit integer `i` into `dst` at the location specified by `index`. 
                @Intrinsic
                public static extern func _mm256_insert_epi8(a: __m256i, i: i8, index: i32) -> __m256i
                
                /// Copy `a` to `dst`, and insert the 16-bit integer `i` into `dst` at the location specified by `index`. 
                @Intrinsic
                public static extern func _mm256_insert_epi16(a: __m256i, i: i16, index: i32) -> __m256i
                
                /// Copy `a` to `dst`, and insert the 32-bit integer `i` into `dst` at the location specified by `index`. 
                @Intrinsic
                public static extern func _mm256_insert_epi32(a: __m256i, i: i32, index: i32) -> __m256i
                
                /// Copy `a` to `dst`, and insert the 64-bit integer `i` into `dst` at the location specified by `index`. 
                @Intrinsic
                public static extern func _mm256_insert_epi64(a: __m256i, i: i64, index: i32) -> __m256i
                
                /// Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into `dst`. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_load_pd(mem_addr: *f64) -> __m256d
                
                /// Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from `a` into memory. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_store_pd(mem_addr: *f64, a: __m256d)
                
                /// Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into `dst`. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_load_ps(mem_addr: *f32) -> __m256
                
                /// Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from `a` into memory. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_store_ps(mem_addr: *f32, a: __m256)
                
                /// Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into `dst`. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_loadu_pd(mem_addr: *f64) -> __m256d
                
                /// Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from `a` into memory. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_storeu_pd(mem_addr: *f64, a: __m256d)
                
                /// Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into `dst`. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_loadu_ps(mem_addr: *f32) -> __m256
                
                /// Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from `a` into memory. 	`mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_storeu_ps(mem_addr: *f32, a: __m256)
                
                /// Load 256-bits of integer data from memory into `dst`. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_load_si256(mem_addr: *__m256i) -> __m256i
                
                /// Store 256-bits of integer data from `a` into memory. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_store_si256(mem_addr: *__m256i, a: __m256i)
                
                /// Load 256-bits of integer data from memory into `dst`. 	`mem_addr` does not need to be aligned on any particular boundary. 	
                @Intrinsic
                public static unsafe extern func _mm256_loadu_si256(mem_addr: *__m256i) -> __m256i
                
                /// Store 256-bits of integer data from `a` into memory. 	`mem_addr` does not need to be aligned on any particular boundary. 	
                @Intrinsic
                public static unsafe extern func _mm256_storeu_si256(mem_addr: *__m256i, a: __m256i)
                
                /// Load packed double-precision (64-bit) floating-point elements from memory into `dst` using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).
                @Intrinsic
                public static unsafe extern func _mm256_maskload_pd(mem_addr: *f64, mask: __m256i) -> __m256d
                
                /// Store packed double-precision (64-bit) floating-point elements from `a` into memory using `mask`.
                @Intrinsic
                public static unsafe extern func _mm256_maskstore_pd(mem_addr: *f64, mask: __m256i, a: __m256d)
                
                /// Load packed double-precision (64-bit) floating-point elements from memory into `dst` using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).
                @Intrinsic
                public static unsafe extern func _mm_maskload_pd(mem_addr: *f64, mask: __m128i) -> __m128d
                
                /// Store packed double-precision (64-bit) floating-point elements from `a` into memory using `mask`.
                @Intrinsic
                public static unsafe extern func _mm_maskstore_pd(mem_addr: *f64, mask: __m128i, a: __m128d)
                
                /// Load packed single-precision (32-bit) floating-point elements from memory into `dst` using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).
                @Intrinsic
                public static unsafe extern func _mm256_maskload_ps(mem_addr: *f32, mask: __m256i) -> __m256
                
                /// Store packed single-precision (32-bit) floating-point elements from `a` into memory using `mask`.
                @Intrinsic
                public static unsafe extern func _mm256_maskstore_ps(mem_addr: *f32, mask: __m256i, a: __m256)
                
                /// Load packed single-precision (32-bit) floating-point elements from memory into `dst` using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).
                @Intrinsic
                public static unsafe extern func _mm_maskload_ps(mem_addr: *f32, mask: __m128i) -> __m128
                
                /// Store packed single-precision (32-bit) floating-point elements from `a` into memory using `mask`.
                @Intrinsic
                public static unsafe extern func _mm_maskstore_ps(mem_addr: *f32, mask: __m128i, a: __m128)
                
                /// Duplicate odd-indexed single-precision (32-bit) floating-point elements from `a`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_movehdup_ps(a: __m256) -> __m256
                
                /// Duplicate even-indexed single-precision (32-bit) floating-point elements from `a`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_moveldup_ps(a: __m256) -> __m256
                
                /// Duplicate even-indexed double-precision (64-bit) floating-point elements from `a`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_movedup_pd(a: __m256d) -> __m256d
                
                /// Load 256-bits of integer data from unaligned memory into `dst`. This intrinsic may perform better than `_mm256_loadu_si256` when the data crosses a cache line boundary.
                @Intrinsic
                public static unsafe extern func _mm256_lddqu_si256(mem_addr: *__m256i) -> __m256i
                
                /// Store 256-bits of integer data from `a` into memory using a non-temporal memory hint. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_stream_si256(mem_addr: *__m256i, a: __m256i)
                
                /// Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from `a` into memory using a non-temporal memory hint. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_stream_pd(mem_addr: *f64, a: __m256d)
                
                /// Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from `a` into memory using a non-temporal memory hint. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_stream_ps(mem_addr: *f32, a: __m256)
                
                /// Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`. The maximum relative error for this approximation is less than 1.5*2^-12.
                @Intrinsic
                public static extern func _mm256_rcp_ps(a: __m256) -> __m256
                
                /// Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`. The maximum relative error for this approximation is less than 1.5*2^-12.
                @Intrinsic
                public static extern func _mm256_rsqrt_ps(a: __m256) -> __m256
                
                /// Compute the square root of packed double-precision (64-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sqrt_pd(a: __m256d) -> __m256d
                
                /// Compute the square root of packed single-precision (32-bit) floating-point elements in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sqrt_ps(a: __m256) -> __m256
                
                /// Round the packed double-precision (64-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed double-precision floating-point elements in `dst`. 	[round_note] 	
                @Intrinsic
                public static extern func _mm256_round_pd(a: __m256d, rounding: i32) -> __m256d
                
                /// Round the packed single-precision (32-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed single-precision floating-point elements in `dst`. 	[round_note] 	
                @Intrinsic
                public static extern func _mm256_round_ps(a: __m256, rounding: i32) -> __m256
                
                /// Unpack and interleave double-precision (64-bit) floating-point elements from the high half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpackhi_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Unpack and interleave single-precision (32-bit) floating-point elements from the high half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpackhi_ps(a: __m256, b: __m256) -> __m256
                
                /// Unpack and interleave double-precision (64-bit) floating-point elements from the low half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpacklo_pd(a: __m256d, b: __m256d) -> __m256d
                
                /// Unpack and interleave single-precision (32-bit) floating-point elements from the low half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpacklo_ps(a: __m256, b: __m256) -> __m256
                
                /// Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `ZF` value.
                @Intrinsic
                public static extern func _mm256_testz_si256(a: __m256i, b: __m256i) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `CF` value.
                @Intrinsic
                public static extern func _mm256_testc_si256(a: __m256i, b: __m256i) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm256_testnzc_si256(a: __m256i, b: __m256i) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.
                @Intrinsic
                public static extern func _mm256_testz_pd(a: __m256d, b: __m256d) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.
                @Intrinsic
                public static extern func _mm256_testc_pd(a: __m256d, b: __m256d) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm256_testnzc_pd(a: __m256d, b: __m256d) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.
                @Intrinsic
                public static extern func _mm_testz_pd(a: __m128d, b: __m128d) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.
                @Intrinsic
                public static extern func _mm_testc_pd(a: __m128d, b: __m128d) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm_testnzc_pd(a: __m128d, b: __m128d) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.
                @Intrinsic
                public static extern func _mm256_testz_ps(a: __m256, b: __m256) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.
                @Intrinsic
                public static extern func _mm256_testc_ps(a: __m256, b: __m256) -> i32
                
                /// Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm256_testnzc_ps(a: __m256, b: __m256) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.
                @Intrinsic
                public static extern func _mm_testz_ps(a: __m128, b: __m128) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.
                @Intrinsic
                public static extern func _mm_testc_ps(a: __m128, b: __m128) -> i32
                
                /// Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.
                @Intrinsic
                public static extern func _mm_testnzc_ps(a: __m128, b: __m128) -> i32
                
                /// Set each bit of mask `dst` based on the most significant bit of the corresponding packed double-precision (64-bit) floating-point element in `a`.
                @Intrinsic
                public static extern func _mm256_movemask_pd(a: __m256d) -> i32
                
                /// Set each bit of mask `dst` based on the most significant bit of the corresponding packed single-precision (32-bit) floating-point element in `a`.
                @Intrinsic
                public static extern func _mm256_movemask_ps(a: __m256) -> i32
                
                /// Return vector of type __m256d with all elements set to zero.
                @Intrinsic
                public static extern func _mm256_setzero_pd() -> __m256d
                
                /// Return vector of type __m256 with all elements set to zero.
                @Intrinsic
                public static extern func _mm256_setzero_ps() -> __m256
                
                /// Return vector of type __m256i with all elements set to zero.
                @Intrinsic
                public static extern func _mm256_setzero_si256() -> __m256i
                
                /// Set packed double-precision (64-bit) floating-point elements in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_pd(e3: f64, e2: f64, e1: f64, e0: f64) -> __m256d
                
                /// Set packed single-precision (32-bit) floating-point elements in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_ps(e7: f32, e6: f32, e5: f32, e4: f32, e3: f32, e2: f32, e1: f32, e0: f32) -> __m256
                
                /// Set packed 8-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm256_set_epi8(e31: u8, e30: u8, e29: u8, e28: u8, e27: u8, e26: u8, e25: u8, e24: u8, e23: u8, e22: u8, e21: u8, e20: u8, e19: u8, e18: u8, e17: u8, e16: u8, e15: u8, e14: u8, e13: u8, e12: u8, e11: u8, e10: u8, e9: u8, e8: u8, e7: u8, e6: u8, e5: u8, e4: u8, e3: u8, e2: u8, e1: u8, e0: u8) -> __m256i
                
                /// Set packed 16-bit integers in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_epi16(e15: i16, e14: i16, e13: i16, e12: i16, e11: i16, e10: i16, e9: i16, e8: i16, e7: i16, e6: i16, e5: i16, e4: i16, e3: i16, e2: i16, e1: i16, e0: i16) -> __m256i
                
                /// Set packed 32-bit integers in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_epi32(e7: i32, e6: i32, e5: i32, e4: i32, e3: i32, e2: i32, e1: i32, e0: i32) -> __m256i
                
                /// Set packed 64-bit integers in `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_epi64x(e3: i64, e2: i64, e1: i64, e0: i64) -> __m256i
                
                /// Set packed double-precision (64-bit) floating-point elements in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm256_setr_pd(e3: f64, e2: f64, e1: f64, e0: f64) -> __m256d
                
                /// Set packed single-precision (32-bit) floating-point elements in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm256_setr_ps(e7: f32, e6: f32, e5: f32, e4: f32, e3: f32, e2: f32, e1: f32, e0: f32) -> __m256
                
                /// Set packed 8-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm256_setr_epi8(e31: u8, e30: u8, e29: u8, e28: u8, e27: u8, e26: u8, e25: u8, e24: u8, e23: u8, e22: u8, e21: u8, e20: u8, e19: u8, e18: u8, e17: u8, e16: u8, e15: u8, e14: u8, e13: u8, e12: u8, e11: u8, e10: u8, e9: u8, e8: u8, e7: u8, e6: u8, e5: u8, e4: u8, e3: u8, e2: u8, e1: u8, e0: u8) -> __m256i
                
                /// Set packed 16-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm256_setr_epi16(e15: i16, e14: i16, e13: i16, e12: i16, e11: i16, e10: i16, e9: i16, e8: i16, e7: i16, e6: i16, e5: i16, e4: i16, e3: i16, e2: i16, e1: i16, e0: i16) -> __m256i
                
                /// Set packed 32-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm256_setr_epi32(e7: i32, e6: i32, e5: i32, e4: i32, e3: i32, e2: i32, e1: i32, e0: i32) -> __m256i
                
                /// Set packed 64-bit integers in `dst` with the supplied values in reverse order.
                @Intrinsic
                public static extern func _mm256_setr_epi64x(e3: i64, e2: i64, e1: i64, e0: i64) -> __m256i
                
                /// Broadcast double-precision (64-bit) floating-point value `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm256_set1_pd(a: f64) -> __m256d
                
                /// Broadcast single-precision (32-bit) floating-point value `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm256_set1_ps(a: f32) -> __m256
                
                /// Broadcast 8-bit integer `a` to all elements of `dst`. This intrinsic may generate the `vpbroadcastb`.
                @Intrinsic
                public static extern func _mm256_set1_epi8(a: u8) -> __m256i
                
                /// Broadcast 16-bit integer `a` to all all elements of `dst`. This intrinsic may generate the `vpbroadcastw`.
                @Intrinsic
                public static extern func _mm256_set1_epi16(a: i16) -> __m256i
                
                /// Broadcast 32-bit integer `a` to all elements of `dst`. This intrinsic may generate the `vpbroadcastd`.
                @Intrinsic
                public static extern func _mm256_set1_epi32(a: i32) -> __m256i
                
                /// Broadcast 64-bit integer `a` to all elements of `dst`. This intrinsic may generate the `vpbroadcastq`.
                @Intrinsic
                public static extern func _mm256_set1_epi64x(a: i64) -> __m256i
                
                /// Cast vector of type __m256d to type __m256. 	This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm256_castpd_ps(a: __m256d) -> __m256
                
                /// Cast vector of type __m256 to type __m256d. 	This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.
                @Intrinsic
                public static extern func _mm256_castps_pd(a: __m256) -> __m256d
                
                /// Casts vector of type __m256 to type __m256i. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castps_si256(a: __m256) -> __m256i
                
                /// Casts vector of type __m256d to type __m256i. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castpd_si256(a: __m256d) -> __m256i
                
                /// Casts vector of type __m256i to type __m256. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castsi256_ps(a: __m256i) -> __m256
                
                /// Casts vector of type __m256i to type __m256d. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castsi256_pd(a: __m256i) -> __m256d
                
                /// Casts vector of type __m256 to type __m128. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castps256_ps128(a: __m256) -> __m128
                
                /// Casts vector of type __m256d to type __m128d. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castpd256_pd128(a: __m256d) -> __m128d
                
                /// Casts vector of type __m256i to type __m128i. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castsi256_si128(a: __m256i) -> __m128i
                
                /// Casts vector of type __m128 to type __m256; the upper 128 bits of the result are undefined. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castps128_ps256(a: __m128) -> __m256
                
                /// Casts vector of type __m128d to type __m256d; the upper 128 bits of the result are undefined. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castpd128_pd256(a: __m128d) -> __m256d
                
                /// Casts vector of type __m128i to type __m256i; the upper 128 bits of the result are undefined. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_castsi128_si256(a: __m128i) -> __m256i
                
                /// Casts vector of type __m128 to type __m256; the upper 128 bits of the result are zeroed. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_zextps128_ps256(a: __m128) -> __m256
                
                /// Casts vector of type __m128d to type __m256d; the upper 128 bits of the result are zeroed. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_zextpd128_pd256(a: __m128d) -> __m256d
                
                /// Casts vector of type __m128i to type __m256i; the upper 128 bits of the result are zeroed. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency. 	
                @Intrinsic
                public static extern func _mm256_zextsi128_si256(a: __m128i) -> __m256i
                
                /// Round the packed single-precision (32-bit) floating-point elements in `a` down to an integer value, and store the results as packed single-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm256_floor_ps(a: __m256) -> __m256
                
                /// Round the packed single-precision (32-bit) floating-point elements in `a` up to an integer value, and store the results as packed single-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm256_ceil_ps(a: __m256) -> __m256
                
                /// Round the packed double-precision (64-bit) floating-point elements in `a` down to an integer value, and store the results as packed double-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm256_floor_pd(a: __m256d) -> __m256d
                
                /// Round the packed double-precision (64-bit) floating-point elements in `a` up to an integer value, and store the results as packed double-precision floating-point elements in `dst`.
                @Intrinsic
                public static extern func _mm256_ceil_pd(a: __m256d) -> __m256d
            }
            
            public partial module sse
            {
                
                /// Return vector of type __m128 with undefined elements.
                @Intrinsic
                public static extern func _mm_undefined_ps() -> __m128
            }
            
            public partial module sse2
            {
                
                /// Return vector of type __m128d with undefined elements.
                @Intrinsic
                public static extern func _mm_undefined_pd() -> __m128d
                
                /// Return vector of type __m128i with undefined elements.
                @Intrinsic
                public static extern func _mm_undefined_si128() -> __m128i
            }
            
            public partial module avx
            {
                
                /// Return vector of type __m256 with undefined elements.
                @Intrinsic
                public static extern func _mm256_undefined_ps() -> __m256
                
                /// Return vector of type __m256d with undefined elements.
                @Intrinsic
                public static extern func _mm256_undefined_pd() -> __m256d
                
                /// Return vector of type __m256i with undefined elements.
                @Intrinsic
                public static extern func _mm256_undefined_si256() -> __m256i
                
                /// Set packed __m256 vector `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_m128(hi: __m128, lo: __m128) -> __m256
                
                /// Set packed __m256d vector `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_m128d(hi: __m128d, lo: __m128d) -> __m256d
                
                /// Set packed __m256i vector `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_set_m128i(hi: __m128i, lo: __m128i) -> __m256i
                
                /// Set packed __m256 vector `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_setr_m128(lo: __m128, hi: __m128) -> __m256
                
                /// Set packed __m256d vector `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_setr_m128d(lo: __m128d, hi: __m128d) -> __m256d
                
                /// Set packed __m256i vector `dst` with the supplied values.
                @Intrinsic
                public static extern func _mm256_setr_m128i(lo: __m128i, hi: __m128i) -> __m256i
                
                /// Load two 128-bit values (composed of 4 packed single-precision (32-bit) floating-point elements) from memory, and combine them into a 256-bit value in `dst`. 	`hiaddr` and `loaddr` do not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_loadu2_m128(hiaddr: *f32, loaddr: *f32) -> __m256
                
                /// Load two 128-bit values (composed of 2 packed double-precision (64-bit) floating-point elements) from memory, and combine them into a 256-bit value in `dst`. 	`hiaddr` and `loaddr` do not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_loadu2_m128d(hiaddr: *f64, loaddr: *f64) -> __m256d
                
                /// Load two 128-bit values (composed of integer data) from memory, and combine them into a 256-bit value in `dst`. 	`hiaddr` and `loaddr` do not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_loadu2_m128i(hiaddr: *__m128i, loaddr: *__m128i) -> __m256i
                
                /// Store the high and low 128-bit halves (each composed of 4 packed single-precision (32-bit) floating-point elements) from `a` into memory two different 128-bit locations. 	`hiaddr` and `loaddr` do not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_storeu2_m128(hiaddr: *f32, loaddr: *f32, a: __m256)
                
                /// Store the high and low 128-bit halves (each composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory two different 128-bit locations. 	`hiaddr` and `loaddr` do not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_storeu2_m128d(hiaddr: *f64, loaddr: *f64, a: __m256d)
                
                /// Store the high and low 128-bit halves (each composed of integer data) from `a` into memory two different 128-bit locations. 	`hiaddr` and `loaddr` do not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm256_storeu2_m128i(hiaddr: *__m128i, loaddr: *__m128i, a: __m256i)
            }
            
            public partial module avx2
            {
                
                /// Compute the absolute value of packed 8-bit integers in `a`, and store the unsigned results in `dst`. 
                @Intrinsic
                public static extern func _mm256_abs_epi8(a: __m256i) -> __m256i
                
                /// Compute the absolute value of packed 16-bit integers in `a`, and store the unsigned results in `dst`. 
                @Intrinsic
                public static extern func _mm256_abs_epi16(a: __m256i) -> __m256i
                
                /// Compute the absolute value of packed 32-bit integers in `a`, and store the unsigned results in `dst`. 
                @Intrinsic
                public static extern func _mm256_abs_epi32(a: __m256i) -> __m256i
                
                /// Add packed 8-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_add_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Add packed 16-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_add_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Add packed 32-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_add_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Add packed 64-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_add_epi64(a: __m256i, b: __m256i) -> __m256i
                
                /// Add packed 8-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_adds_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Add packed 16-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_adds_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Add packed unsigned 8-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_adds_epu8(a: __m256i, b: __m256i) -> __m256i
                
                /// Add packed unsigned 16-bit integers in `a` and `b` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_adds_epu16(a: __m256i, b: __m256i) -> __m256i
                
                /// Concatenate pairs of 16-byte blocks in `a` and `b` into a 32-byte temporary result, shift the result right by `count` bytes, and store the low 16 bytes in `dst`. 
                @Intrinsic
                public static extern func _mm256_alignr_epi8(a: __m256i, b: __m256i, count: i32) -> __m256i
                
                /// Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_and_si256(a: __m256i, b: __m256i) -> __m256i
                
                /// Compute the bitwise NOT of 256 bits (representing integer data) in `a` and then AND with `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_andnot_si256(a: __m256i, b: __m256i) -> __m256i
                
                /// Average packed unsigned 8-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_avg_epu8(a: __m256i, b: __m256i) -> __m256i
                
                /// Average packed unsigned 16-bit integers in `a` and `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_avg_epu16(a: __m256i, b: __m256i) -> __m256i
                
                /// Blend packed 16-bit integers from `a` and `b` within 128-bit lanes using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_blend_epi16(a: __m256i, b: __m256i, imm8: i32) -> __m256i
                
                /// Blend packed 32-bit integers from `a` and `b` using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm_blend_epi32(a: __m128i, b: __m128i, imm8: i32) -> __m128i
                
                /// Blend packed 32-bit integers from `a` and `b` using control mask `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_blend_epi32(a: __m256i, b: __m256i, imm8: i32) -> __m256i
                
                /// Blend packed 8-bit integers from `a` and `b` using `mask`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_blendv_epi8(a: __m256i, b: __m256i, mask: __m256i) -> __m256i
                
                /// Broadcast the low packed 8-bit integer from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_broadcastb_epi8(a: __m128i) -> __m128i
                
                /// Broadcast the low packed 8-bit integer from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm256_broadcastb_epi8(a: __m128i) -> __m256i
                
                /// Broadcast the low packed 32-bit integer from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_broadcastd_epi32(a: __m128i) -> __m128i
                
                /// Broadcast the low packed 32-bit integer from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm256_broadcastd_epi32(a: __m128i) -> __m256i
                
                /// Broadcast the low packed 64-bit integer from `a` to all elements of `dst`. 
                @Intrinsic
                public static extern func _mm_broadcastq_epi64(a: __m128i) -> __m128i
                
                /// Broadcast the low packed 64-bit integer from `a` to all elements of `dst`. 
                @Intrinsic
                public static extern func _mm256_broadcastq_epi64(a: __m128i) -> __m256i
                
                /// Broadcast the low double-precision (64-bit) floating-point element from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_broadcastsd_pd(a: __m128d) -> __m128d
                
                /// Broadcast the low double-precision (64-bit) floating-point element from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm256_broadcastsd_pd(a: __m128d) -> __m256d
                
                /// Broadcast 128 bits of integer data from `a` to all 128-bit lanes in `dst`. 	
                @Intrinsic
                public static extern func _mm_broadcastsi128_si256(a: __m128i) -> __m256i
                
                /// Broadcast 128 bits of integer data from `a` to all 128-bit lanes in `dst`. 	
                @Intrinsic
                public static extern func _mm256_broadcastsi128_si256(a: __m128i) -> __m256i
                
                /// Broadcast the low single-precision (32-bit) floating-point element from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_broadcastss_ps(a: __m128) -> __m128
                
                /// Broadcast the low single-precision (32-bit) floating-point element from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm256_broadcastss_ps(a: __m128) -> __m256
                
                /// Broadcast the low packed 16-bit integer from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm_broadcastw_epi16(a: __m128i) -> __m128i
                
                /// Broadcast the low packed 16-bit integer from `a` to all elements of `dst`.
                @Intrinsic
                public static extern func _mm256_broadcastw_epi16(a: __m128i) -> __m256i
                
                /// Compare packed 8-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpeq_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 16-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpeq_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 32-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpeq_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 64-bit integers in `a` and `b` for equality, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpeq_epi64(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 8-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpgt_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 16-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpgt_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 32-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpgt_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 64-bit integers in `a` and `b` for greater-than, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cmpgt_epi64(a: __m256i, b: __m256i) -> __m256i
                
                /// Sign extend packed 16-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi16_epi32(a: __m128i) -> __m256i
                
                /// Sign extend packed 16-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi16_epi64(a: __m128i) -> __m256i
                
                /// Sign extend packed 32-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi32_epi64(a: __m128i) -> __m256i
                
                /// Sign extend packed 8-bit integers in `a` to packed 16-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi8_epi16(a: __m128i) -> __m256i
                
                /// Sign extend packed 8-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi8_epi32(a: __m128i) -> __m256i
                
                /// Sign extend packed 8-bit integers in the low 8 bytes of `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepi8_epi64(a: __m128i) -> __m256i
                
                /// Zero extend packed unsigned 16-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepu16_epi32(a: __m128i) -> __m256i
                
                /// Zero extend packed unsigned 16-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepu16_epi64(a: __m128i) -> __m256i
                
                /// Zero extend packed unsigned 32-bit integers in `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepu32_epi64(a: __m128i) -> __m256i
                
                /// Zero extend packed unsigned 8-bit integers in `a` to packed 16-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepu8_epi16(a: __m128i) -> __m256i
                
                /// Zero extend packed unsigned 8-bit integers in `a` to packed 32-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepu8_epi32(a: __m128i) -> __m256i
                
                /// Zero extend packed unsigned 8-bit integers in the low 8 byte sof `a` to packed 64-bit integers, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_cvtepu8_epi64(a: __m128i) -> __m256i
                
                /// Extract 128 bits (composed of integer data) from `a`, selected with `imm8`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_extracti128_si256(a: __m256i, imm8: i32) -> __m128i
                
                /// Horizontally add adjacent pairs of 16-bit integers in `a` and `b`, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm256_hadd_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Horizontally add adjacent pairs of 32-bit integers in `a` and `b`, and pack the signed 32-bit results in `dst`.
                @Intrinsic
                public static extern func _mm256_hadd_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Horizontally add adjacent pairs of 16-bit integers in `a` and `b` using saturation, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm256_hadds_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b`, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm256_hsub_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Horizontally subtract adjacent pairs of 32-bit integers in `a` and `b`, and pack the signed 32-bit results in `dst`.
                @Intrinsic
                public static extern func _mm256_hsub_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b` using saturation, and pack the signed 16-bit results in `dst`.
                @Intrinsic
                public static extern func _mm256_hsubs_epi16(a: __m256i, b: __m256i) -> __m256i
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_i32gather_pd(base_addr: *f64, vindex: __m128i, scale: i32) -> __m128d
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_i32gather_pd(base_addr: *f64, vindex: __m128i, scale: i32) -> __m256d
                
                /// Gather single-precision (32-bit) floating-point elements from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8.
                @Intrinsic
                public static unsafe extern func _mm_i32gather_ps(base_addr: *f32, vindex: __m128i, scale: i32) -> __m128
                
                /// Gather single-precision (32-bit) floating-point elements from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8.
                @Intrinsic
                public static unsafe extern func _mm256_i32gather_ps(base_addr: *f32, vindex: __m256i, scale: i32) -> __m256
                
                ///  	Gather 32-bit integers from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_i32gather_epi32(base_addr: *i32, vindex: __m128i, scale: i32) -> __m128i
                
                ///  	Gather 32-bit integers from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_i32gather_epi32(base_addr: *i32, vindex: __m256i, scale: i32) -> __m256i
                
                /// Gather 64-bit integers from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_i32gather_epi64(base_addr: *i64, vindex: __m128i, scale: i32) -> __m128i
                
                /// Gather 64-bit integers from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_i32gather_epi64(base_addr: *i64, vindex: __m128i, scale: i32) -> __m256i
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_i64gather_pd(base_addr: *f64, vindex: __m128i, scale: i32) -> __m128d
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_i64gather_pd(base_addr: *f64, vindex: __m256i, scale: i32) -> __m256d
                
                ///  	Gather single-precision (32-bit) floating-point elements from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_i64gather_ps(base_addr: *f32, vindex: __m128i, scale: i32) -> __m128
                
                ///  	Gather single-precision (32-bit) floating-point elements from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_i64gather_ps(base_addr: *f32, vindex: __m256i, scale: i32) -> __m128
                
                /// Gather 32-bit integers from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_i64gather_epi32(base_addr: *i32, vindex: __m128i, scale: i32) -> __m128i
                
                /// Gather 32-bit integers from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_i64gather_epi32(base_addr: *i32, vindex: __m256i, scale: i32) -> __m128i
                
                /// Gather 64-bit integers from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_i64gather_epi64(base_addr: *i64, vindex: __m128i, scale: i32) -> __m128i
                
                /// Gather 64-bit integers from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst`. `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_i64gather_epi64(base_addr: *i64, vindex: __m256i, scale: i32) -> __m256i
                
                /// Copy `a` to `dst`, then insert 128 bits (composed of integer data) from `b` into `dst` at the location specified by `imm8`.
                @Intrinsic
                public static extern func _mm256_inserti128_si256(a: __m256i, b: __m128i, imm8: i32) -> __m256i
                
                /// Multiply packed signed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_madd_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Vertically multiply each unsigned 8-bit integer from `a` with the corresponding signed 8-bit integer from `b`, producing intermediate signed 16-bit integers. Horizontally add adjacent pairs of intermediate signed 16-bit integers, and pack the saturated results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_maddubs_epi16(a: __m256i, b: __m256i) -> __m256i
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i32gather_pd(src: __m128d, base_addr: *f64, vindex: __m128i, mask: __m128d, scale: i32) -> __m128d
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i32gather_pd(src: __m256d, base_addr: *f64, vindex: __m128i, mask: __m256d, scale: i32) -> __m256d
                
                ///  	Gather single-precision (32-bit) floating-point elements from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i32gather_ps(src: __m128, base_addr: *f32, vindex: __m128i, mask: __m128, scale: i32) -> __m128
                
                ///  	Gather single-precision (32-bit) floating-point elements from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i32gather_ps(src: __m256, base_addr: *f32, vindex: __m256i, mask: __m256, scale: i32) -> __m256
                
                ///  	Gather 32-bit integers from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i32gather_epi32(src: __m128i, base_addr: *i32, vindex: __m128i, mask: __m128i, scale: i32) -> __m128i
                
                ///  	Gather 32-bit integers from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i32gather_epi32(src: __m256i, base_addr: *i32, vindex: __m256i, mask: __m256i, scale: i32) -> __m256i
                
                ///  	Gather 64-bit integers from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i32gather_epi64(src: __m128i, base_addr: *i64, vindex: __m128i, mask: __m128i, scale: i32) -> __m128i
                
                ///  	Gather 64-bit integers from memory using 32-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 32-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i32gather_epi64(src: __m256i, base_addr: *i64, vindex: __m128i, mask: __m256i, scale: i32) -> __m256i
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i64gather_pd(src: __m128d, base_addr: *f64, vindex: __m128i, mask: __m128d, scale: i32) -> __m128d
                
                ///  	Gather double-precision (64-bit) floating-point elements from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i64gather_pd(src: __m256d, base_addr: *f64, vindex: __m256i, mask: __m256d, scale: i32) -> __m256d
                
                ///  	Gather single-precision (32-bit) floating-point elements from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i64gather_ps(src: __m128, base_addr: *f32, vindex: __m128i, mask: __m128, scale: i32) -> __m128
                
                ///  	Gather single-precision (32-bit) floating-point elements from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i64gather_ps(src: __m128, base_addr: *f32, vindex: __m256i, mask: __m128, scale: i32) -> __m128
                
                ///  	Gather 32-bit integers from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i64gather_epi32(src: __m128i, base_addr: *i32, vindex: __m128i, mask: __m128i, scale: i32) -> __m128i
                
                ///  	Gather 32-bit integers from memory using 64-bit indices. 32-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i64gather_epi32(src: __m128i, base_addr: *i32, vindex: __m256i, mask: __m128i, scale: i32) -> __m128i
                
                ///  	Gather 64-bit integers from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm_mask_i64gather_epi64(src: __m128i, base_addr: *i64, vindex: __m128i, mask: __m128i, scale: i32) -> __m128i
                
                ///  	Gather 64-bit integers from memory using 64-bit indices. 64-bit elements are loaded from addresses starting at `base_addr` and offset by each 64-bit element in `vindex` (each index is scaled by the factor in `scale`). Gathered elements are merged into `dst` using `mask` (elements are copied from `src` when the highest bit is not set in the corresponding element). `scale` should be 1, 2, 4 or 8. 	
                @Intrinsic
                public static unsafe extern func _mm256_mask_i64gather_epi64(src: __m256i, base_addr: *i64, vindex: __m256i, mask: __m256i, scale: i32) -> __m256i
                
                /// Load packed 32-bit integers from memory into `dst` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).
                @Intrinsic
                public static unsafe extern func _mm_maskload_epi32(mem_addr: *i32, mask: __m128i) -> __m128i
                
                /// Load packed 32-bit integers from memory into `dst` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).
                @Intrinsic
                public static unsafe extern func _mm256_maskload_epi32(mem_addr: *i32, mask: __m256i) -> __m256i
                
                /// Load packed 64-bit integers from memory into `dst` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).
                @Intrinsic
                public static unsafe extern func _mm_maskload_epi64(mem_addr: *i64, mask: __m128i) -> __m128i
                
                /// Load packed 64-bit integers from memory into `dst` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).
                @Intrinsic
                public static unsafe extern func _mm256_maskload_epi64(mem_addr: *i64, mask: __m256i) -> __m256i
                
                /// Store packed 32-bit integers from `a` into memory using `mask` (elements are not stored when the highest bit is not set in the corresponding element). 	
                @Intrinsic
                public static unsafe extern func _mm_maskstore_epi32(mem_addr: *i32, mask: __m128i, a: __m128i)
                
                /// Store packed 32-bit integers from `a` into memory using `mask` (elements are not stored when the highest bit is not set in the corresponding element). 	
                @Intrinsic
                public static unsafe extern func _mm256_maskstore_epi32(mem_addr: *i32, mask: __m256i, a: __m256i)
                
                /// Store packed 64-bit integers from `a` into memory using `mask` (elements are not stored when the highest bit is not set in the corresponding element). 	
                @Intrinsic
                public static unsafe extern func _mm_maskstore_epi64(mem_addr: *i64, mask: __m128i, a: __m128i)
                
                /// Store packed 64-bit integers from `a` into memory using `mask` (elements are not stored when the highest bit is not set in the corresponding element). 	
                @Intrinsic
                public static unsafe extern func _mm256_maskstore_epi64(mem_addr: *i64, mask: __m256i, a: __m256i)
                
                /// Compare packed 8-bit integers in `a` and `b`, and store packed maximum values in `dst`. 
                @Intrinsic
                public static extern func _mm256_max_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 16-bit integers in `a` and `b`, and store packed maximum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_max_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 32-bit integers in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm256_max_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed unsigned 8-bit integers in `a` and `b`, and store packed maximum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_max_epu8(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed unsigned 16-bit integers in `a` and `b`, and store packed maximum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_max_epu16(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed unsigned 32-bit integers in `a` and `b`, and store packed maximum values in `dst`.
                @Intrinsic
                public static extern func _mm256_max_epu32(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 8-bit integers in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 16-bit integers in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed 32-bit integers in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed unsigned 8-bit integers in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_epu8(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed unsigned 16-bit integers in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_epu16(a: __m256i, b: __m256i) -> __m256i
                
                /// Compare packed unsigned 32-bit integers in `a` and `b`, and store packed minimum values in `dst`. 	
                @Intrinsic
                public static extern func _mm256_min_epu32(a: __m256i, b: __m256i) -> __m256i
                
                ///  Create mask from the most significant bit of each 8-bit element in `a`, and store the result in `dst`. 	
                @Intrinsic
                public static extern func _mm256_movemask_epi8(a: __m256i) -> i32
                
                /// Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in `a` compared to those in `b`, and store the 16-bit results in `dst`. 	Eight SADs are performed for each 128-bit lane using one quadruplet from `b` and eight quadruplets from `a`. One quadruplet is selected from `b` starting at on the offset specified in `imm8`. Eight quadruplets are formed from sequential 8-bit integers selected from `a` starting at the offset specified in `imm8`.
                @Intrinsic
                public static extern func _mm256_mpsadbw_epu8(a: __m256i, b: __m256i, imm8: i32) -> __m256i
                
                /// Multiply the low 32-bit integers from each packed 64-bit element in `a` and `b`, and store the signed 64-bit results in `dst`. 
                @Intrinsic
                public static extern func _mm256_mul_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Multiply the low unsigned 32-bit integers from each packed 64-bit element in `a` and `b`, and store the unsigned 64-bit results in `dst`. 
                @Intrinsic
                public static extern func _mm256_mul_epu32(a: __m256i, b: __m256i) -> __m256i
                
                /// Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm256_mulhi_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Multiply the packed unsigned 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm256_mulhi_epu16(a: __m256i, b: __m256i) -> __m256i
                
                /// Multiply packed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Truncate each intermediate integer to the 18 most significant bits, round by adding 1, and store bits [16:1] to `dst`. 
                @Intrinsic
                public static extern func _mm256_mulhrs_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and store the low 16 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm256_mullo_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Multiply the packed 32-bit integers in `a` and `b`, producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in `dst`. 
                @Intrinsic
                public static extern func _mm256_mullo_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Compute the bitwise OR of 256 bits (representing integer data) in `a` and `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_or_si256(a: __m256i, b: __m256i) -> __m256i
                
                /// Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_packs_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_packs_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using unsigned saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_packus_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using unsigned saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_packus_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Shuffle 128-bits (composed of integer data) selected by `imm8` from `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_permute2x128_si256(a: __m256i, b: __m256i, imm8: i32) -> __m256i
                
                /// Shuffle 64-bit integers in `a` across lanes using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_permute4x64_epi64(a: __m256i, imm8: i32) -> __m256i
                
                /// Shuffle double-precision (64-bit) floating-point elements in `a` across lanes using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_permute4x64_pd(a: __m256d, imm8: i32) -> __m256d
                
                /// Shuffle 32-bit integers in `a` across lanes using the corresponding index in `idx`, and store the results in `dst`. 	
                @Intrinsic
                public static extern func _mm256_permutevar8x32_epi32(a: __m256i, idx: __m256i) -> __m256i
                
                /// Shuffle single-precision (32-bit) floating-point elements in `a` across lanes using the corresponding index in `idx`.
                @Intrinsic
                public static extern func _mm256_permutevar8x32_ps(a: __m256, idx: __m256i) -> __m256
                
                /// Compute the absolute differences of packed unsigned 8-bit integers in `a` and `b`, then horizontally sum each consecutive 8 differences to produce four unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low 16 bits of 64-bit elements in `dst`.
                @Intrinsic
                public static extern func _mm256_sad_epu8(a: __m256i, b: __m256i) -> __m256i
                
                /// Shuffle 32-bit integers in `a` within 128-bit lanes using the control in `imm8`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_shuffle_epi32(a: __m256i, imm8: i32) -> __m256i
                
                /// Shuffle 8-bit integers in `a` within 128-bit lanes according to shuffle control mask in the corresponding 8-bit element of `b`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_shuffle_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Shuffle 16-bit integers in the high 64 bits of 128-bit lanes of `a` using the control in `imm8`. Store the results in the high 64 bits of 128-bit lanes of `dst`, with the low 64 bits of 128-bit lanes being copied from from `a` to `dst`.
                @Intrinsic
                public static extern func _mm256_shufflehi_epi16(a: __m256i, imm8: i32) -> __m256i
                
                /// Shuffle 16-bit integers in the low 64 bits of 128-bit lanes of `a` using the control in `imm8`. Store the results in the low 64 bits of 128-bit lanes of `dst`, with the high 64 bits of 128-bit lanes being copied from from `a` to `dst`.
                @Intrinsic
                public static extern func _mm256_shufflelo_epi16(a: __m256i, imm8: i32) -> __m256i
                
                /// Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and store the results in `dst`. Element in `dst` are zeroed out when the corresponding element in `b` is zero.
                @Intrinsic
                public static extern func _mm256_sign_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and store the results in `dst`. Element in `dst` are zeroed out when the corresponding element in `b` is zero.
                @Intrinsic
                public static extern func _mm256_sign_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and store the results in `dst`. Element in `dst` are zeroed out when the corresponding element in `b` is zero.
                @Intrinsic
                public static extern func _mm256_sign_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_slli_si256(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_bslli_epi128(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 16-bit integers in `a` left by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_sll_epi16(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 16-bit integers in `a` left by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_slli_epi16(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 32-bit integers in `a` left by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_sll_epi32(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 32-bit integers in `a` left by `imm8` while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_slli_epi32(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 64-bit integers in `a` left by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_sll_epi64(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 64-bit integers in `a` left by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_slli_epi64(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 32-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_sllv_epi32(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 32-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_sllv_epi32(a: __m256i, count: __m256i) -> __m256i
                
                /// Shift packed 64-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_sllv_epi64(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 64-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_sllv_epi64(a: __m256i, count: __m256i) -> __m256i
                
                /// Shift packed 16-bit integers in `a` right by `count` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_sra_epi16(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 16-bit integers in `a` right by `imm8` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srai_epi16(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 32-bit integers in `a` right by `count` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_sra_epi32(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 32-bit integers in `a` right by `imm8` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srai_epi32(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srav_epi32(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in sign bits, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srav_epi32(a: __m256i, count: __m256i) -> __m256i
                
                /// Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_srli_si256(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_bsrli_epi128(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 16-bit integers in `a` right by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srl_epi16(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 16-bit integers in `a` right by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srli_epi16(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 32-bit integers in `a` right by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srl_epi32(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 32-bit integers in `a` right by `imm8` while shifting in zeros, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_srli_epi32(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 64-bit integers in `a` right by `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srl_epi64(a: __m256i, count: __m128i) -> __m256i
                
                /// Shift packed 64-bit integers in `a` right by `imm8` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srli_epi64(a: __m256i, imm8: i32) -> __m256i
                
                /// Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srlv_epi32(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srlv_epi32(a: __m256i, count: __m256i) -> __m256i
                
                /// Shift packed 64-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm_srlv_epi64(a: __m128i, count: __m128i) -> __m128i
                
                /// Shift packed 64-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_srlv_epi64(a: __m256i, count: __m256i) -> __m256i
                
                /// Load 256-bits of integer data from memory into `dst` using a non-temporal memory hint. 	`mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.
                @Intrinsic
                public static unsafe extern func _mm256_stream_load_si256(mem_addr: *__m256i) -> __m256i
                
                /// Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sub_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sub_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sub_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Subtract packed 64-bit integers in `b` from packed 64-bit integers in `a`, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_sub_epi64(a: __m256i, b: __m256i) -> __m256i
                
                /// Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_subs_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_subs_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_subs_epu8(a: __m256i, b: __m256i) -> __m256i
                
                /// Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation, and store the results in `dst`.
                @Intrinsic
                public static extern func _mm256_subs_epu16(a: __m256i, b: __m256i) -> __m256i
                
                /// Compute the bitwise XOR of 256 bits (representing integer data) in `a` and `b`, and store the result in `dst`.
                @Intrinsic
                public static extern func _mm256_xor_si256(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 8-bit integers from the high half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpackhi_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 16-bit integers from the high half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpackhi_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 32-bit integers from the high half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpackhi_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 64-bit integers from the high half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpackhi_epi64(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 8-bit integers from the low half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpacklo_epi8(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 16-bit integers from the low half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpacklo_epi16(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 32-bit integers from the low half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpacklo_epi32(a: __m256i, b: __m256i) -> __m256i
                
                /// Unpack and interleave 64-bit integers from the low half of each 128-bit lane in `a` and `b`, and store the results in `dst`. 
                @Intrinsic
                public static extern func _mm256_unpacklo_epi64(a: __m256i, b: __m256i) -> __m256i
            }
            
            public partial module sse2
            {
                
                /// Load unaligned 32-bit integer from memory into the first element of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_loadu_si32(mem_addr: *u8) -> __m128i
                
                /// Store 32-bit integer from the first element of `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_storeu_si32(mem_addr: *u8, a: __m128i)
            }
            
            public partial module sse
            {
                
                /// Store 16-bit integer from the first element of `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_storeu_si16(mem_addr: *u8, a: __m128i)
                
                /// Load unaligned 64-bit integer from memory into the first element of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_loadu_si64(mem_addr: *u8) -> __m128i
                
                /// Store 64-bit integer from the first element of `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.
                @Intrinsic
                public static unsafe extern func _mm_storeu_si64(mem_addr: *u8, a: __m128i)
                
                /// Load unaligned 16-bit integer from memory into the first element of `dst`.
                @Intrinsic
                public static unsafe extern func _mm_loadu_si16(mem_addr: *u8) -> __m128i
            }
            
            public partial module avx
            {
                
                /// Copy the lower single-precision (32-bit) floating-point element of `a` to `dst`.
                @Intrinsic
                public static extern func _mm256_cvtss_f32(a: __m256) -> f32
            }
            
            public partial module avx2
            {
                
                /// Copy the lower double-precision (64-bit) floating-point element of `a` to `dst`.
                @Intrinsic
                public static extern func _mm256_cvtsd_f64(a: __m256d) -> f64
                
                /// Copy the lower 32-bit integer in `a` to `dst`.
                @Intrinsic
                public static extern func _mm256_cvtsi256_si32(a: __m256i) -> i32
            }
            
        }
    }
}
