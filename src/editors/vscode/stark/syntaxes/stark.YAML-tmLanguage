# [PackageDev] target_format: plist, ext: tmLanguage
name: Stark
scopeName: source.stark
fileTypes: [sk]
uuid: 582789B5-991D-49E1-8E39-54327B3DBDFF

patterns:
- include: '#comment'
- include: '#control-keywords'
- include: '#keywords'
- include: '#builtin-types'
- include: '#visibility-modifiers'
- include: '#type-declarations'
- include: '#keywords'
- include: '#literals'

repository:
  builtin-types:
    match: \b(bool|rune|f64|f32|i64|i32|i16|i8|u64|u32|u16|u8|int|uint|object|string)\b
    captures:
      '1': {name: keyword.type.sk}
  visibility-modifiers:
    name: storage.modifier.sk
    match: (?<!\.)\b(abstract|async|const|extern|fixed|internal|isolated|immutable|retainable|mutable|new|override|partial|private|protected|public|readonly|transient|static|unsafe|virtual|volatile)\b
  type-declarations:
    patterns:
    - name: keyword.other.class.sk
      match: \bclass\b
    - name: keyword.other.struct.sk
      match: \bstruct\b
    - name: keyword.other.trait.sk
      match: \binterface\b
    - name: keyword.other.enum.sk
      match: \benum\b
    - name: keyword.other.union.sk
      match: \bunion\b
  control-keywords:
    patterns:
      - name: keyword.control.conditional.if.sk
        match: \bif\b
      - name: keyword.control.conditional.else.sk
        match: \belse\b
      - name: keyword.control.loop.do.sk
        match: \bdo\b
      - name: keyword.control.loop.while.sk
        match: \bwhile\b
      - name: keyword.control.loop.for.sk
        match: \bfor\b
      - name: keyword.control.try.sk
        match: \btry\b
      - name: keyword.control.catch.sk
        match: \bcatch\b
      - name: keyword.control.flow.yield.sk
        match: \byield\b
      - name: keyword.control.flow.return.sk
        match: \breturn\b
      - name: keyword.control.flow.break.sk
        match: \bbreak\b
      - name: keyword.control.flow.continue.sk
        match: \bcontinue\b
      - name: keyword.control.flow.throw.sk
        match: \bthrow\b
      - name: keyword.control.flow.switch.sk
        match: \bswitch\b
      - name: keyword.control.flow.case.sk
        match: \bcase\b
      - name: keyword.control.flow.in.sk
        match: \bin\b
      - name: keyword.control.flow.with.sk
        match: \bwith\b
      - name: constant.language.boolean.true.sk
        match: \btrue\b
      - name: constant.language.boolean.false.sk
        match: \bfalse\b
      - name: entity.name.function.sk
        match: \bconstructor\b

  keywords:
    name: keyword.type.sk
    match: \b(alias|as|await|base|default|extends|fatal|func|get|implements|import|is|let|match|namespace|module|operator|out|params|ref|requires|set|sizeof|this|throws|typeof|value|var|where)\b
  comment:
    patterns:
    - name: comment.block.sk
      begin: /\*
      beginCaptures:
        '0': {name: punctuation.definition.comment.sk}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.sk}
    - begin: (^\s+)?(?=//)
      beginCaptures:
        '1': {name: punctuation.whitespace.comment.leading.sk}
      end: (?=$)
      patterns:
      - name: comment.block.documentation.sk
        begin: (?<!/)///(?!/)
        beginCaptures:
          '0': {name: punctuation.definition.comment.sk}
        end: (?=$)
        patterns:
        - include: '#xml-doc-comment'
      - name: comment.line.double-slash.sk
        begin: (?<!/)//(?!/)
        beginCaptures:
          '0': {name: punctuation.definition.comment.sk}
        end: (?=$)
  literals:
    patterns:
      - include: '#numeric-literal'
      - include: '#char-literal'
      - include: '#string-literal'
      - include: '#verbatim-string-literal'

  numeric-literal:
    patterns:
    - name: constant.numeric.hex.sk
      match: \b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    - name: constant.numeric.binary.sk
      match: \b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    - name: constant.numeric.decimal.sk
      match: \b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\b
    - name: constant.numeric.decimal.sk
      match: \b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\b
    - name: constant.numeric.decimal.sk
      match: \b[0-9_]+(F|f|D|d|M|m)\b
    - name: constant.numeric.decimal.sk
      match: \b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
 
  char-literal:
    name: string.quoted.single.sk
    begin: ''''
    beginCaptures:
      '0': {name: punctuation.definition.char.begin.sk}
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': {name: punctuation.definition.char.end.sk}
      '2': {name: invalid.illegal.newline.sk}
    patterns:
    - include: '#string-character-escape'
 
  string-character-escape:
    name: constant.character.escape.sk
    match: \\.
 
  string-literal:
    name: string.quoted.double.sk
    begin: (?<!@)"
    beginCaptures:
      '0': {name: punctuation.definition.skring.begin.sk}
    end: (")|((?:[^\\\n])$)
    endCaptures:
      '1': {name: punctuation.definition.skring.end.sk}
      '2': {name: invalid.illegal.newline.sk}
    patterns:
    - include: '#string-character-escape'

  verbatim-string-character-escape:
    name: constant.character.escape.sk
    match: '""'

  verbatim-string-literal:
    name: string.quoted.double.sk
    begin: '@"'
    beginCaptures:
      '0': {name: punctuation.definition.skring.begin.sk}
    end: '"(?=[^"])'
    endCaptures:
      '0': {name: punctuation.definition.skring.end.sk}
    patterns:
    - include: '#verbatim-string-character-escape'
